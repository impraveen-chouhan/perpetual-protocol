/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsDistributionFakeInterface extends ethers.utils.Interface {
  functions: {
    "addRewardsDistribution(address,tuple)": FunctionFragment;
    "candidate()": FunctionFragment;
    "distributeRewards(address,tuple)": FunctionFragment;
    "distributions(uint256)": FunctionFragment;
    "editRewardsDistribution(uint256,address,tuple)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "mock_getCurrentTimestamp()": FunctionFragment;
    "mock_setBlockNumber(uint256)": FunctionFragment;
    "mock_setBlockTimestamp(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeRewardsDistribution(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addRewardsDistribution",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "distributions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "editRewardsDistribution",
    values: [BigNumberish, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeRewardsDistribution",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeRewardsDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardDistributed(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardDistributed"): EventFragment;
}

export class RewardsDistributionFake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsDistributionFakeInterface;

  functions: {
    addRewardsDistribution(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addRewardsDistribution(address,tuple)"(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    distributeRewards(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "distributeRewards(address,tuple)"(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber] & { d: BigNumber }] & {
        destination: string;
        amount: [BigNumber] & { d: BigNumber };
      }
    >;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber] & { d: BigNumber }] & {
        destination: string;
        amount: [BigNumber] & { d: BigNumber };
      }
    >;

    editRewardsDistribution(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "editRewardsDistribution(uint256,address,tuple)"(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeRewardsDistribution(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeRewardsDistribution(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addRewardsDistribution(
    _destination: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addRewardsDistribution(address,tuple)"(
    _destination: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  distributeRewards(
    _perpToken: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "distributeRewards(address,tuple)"(
    _perpToken: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  distributions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, [BigNumber] & { d: BigNumber }] & {
      destination: string;
      amount: [BigNumber] & { d: BigNumber };
    }
  >;

  "distributions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, [BigNumber] & { d: BigNumber }] & {
      destination: string;
      amount: [BigNumber] & { d: BigNumber };
    }
  >;

  editRewardsDistribution(
    _index: BigNumberish,
    _destination: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "editRewardsDistribution(uint256,address,tuple)"(
    _index: BigNumberish,
    _destination: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _rewardsController: string,
    _defaultRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _rewardsController: string,
    _defaultRecipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_setBlockNumber(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockNumber(uint256)"(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setBlockTimestamp(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeRewardsDistribution(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeRewardsDistribution(uint256)"(
    _index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addRewardsDistribution(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "addRewardsDistribution(address,tuple)"(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    distributeRewards(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeRewards(address,tuple)"(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber] & { d: BigNumber }] & {
        destination: string;
        amount: [BigNumber] & { d: BigNumber };
      }
    >;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, [BigNumber] & { d: BigNumber }] & {
        destination: string;
        amount: [BigNumber] & { d: BigNumber };
      }
    >;

    editRewardsDistribution(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "editRewardsDistribution(uint256,address,tuple)"(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeRewardsDistribution(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeRewardsDistribution(uint256)"(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardDistributed(reward: null, timestamp: null): EventFilter;
  };

  estimateGas: {
    addRewardsDistribution(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addRewardsDistribution(address,tuple)"(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    distributeRewards(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "distributeRewards(address,tuple)"(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editRewardsDistribution(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "editRewardsDistribution(uint256,address,tuple)"(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeRewardsDistribution(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeRewardsDistribution(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addRewardsDistribution(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addRewardsDistribution(address,tuple)"(
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeRewards(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "distributeRewards(address,tuple)"(
      _perpToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    distributions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "distributions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editRewardsDistribution(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "editRewardsDistribution(uint256,address,tuple)"(
      _index: BigNumberish,
      _destination: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _rewardsController: string,
      _defaultRecipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeRewardsDistribution(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeRewardsDistribution(uint256)"(
      _index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
