/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakedPerpTokenMockInterface extends ethers.utils.Interface {
  functions: {
    "balance(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "mock_setBalance(address,uint256)": FunctionFragment;
    "mock_setTotalSupply(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balance", values: [string]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mock_setBalance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {};
}

export class StakedPerpTokenMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakedPerpTokenMockInterface;

  functions: {
    balance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(_staker: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_setBalance(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBalance(address,uint256)"(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setTotalSupply(uint256)"(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mock_setBalance(
    _staker: string,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBalance(address,uint256)"(
    _staker: string,
    _balance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setTotalSupply(
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setTotalSupply(uint256)"(
    _totalSupply: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_setBalance(
      _staker: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBalance(address,uint256)"(
      _staker: string,
      _balance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setTotalSupply(uint256)"(
      _totalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    balance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_setBalance(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBalance(address,uint256)"(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setTotalSupply(uint256)"(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_setBalance(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBalance(address,uint256)"(
      _staker: string,
      _balance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setTotalSupply(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setTotalSupply(uint256)"(
      _totalSupply: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
