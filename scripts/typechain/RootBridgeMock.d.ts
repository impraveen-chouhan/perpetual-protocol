/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RootBridgeMockInterface extends ethers.utils.Interface {
  functions: {
    "messageId()": FunctionFragment;
    "mockSetMessageId(uint256)": FunctionFragment;
    "price()": FunctionFragment;
    "updatePriceFeed(address,bytes32,tuple,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mockSetMessageId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePriceFeed",
    values: [string, BytesLike, { d: BigNumberish }, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSetMessageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceFeed",
    data: BytesLike
  ): Result;

  events: {};
}

export class RootBridgeMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RootBridgeMockInterface;

  functions: {
    messageId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "messageId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockSetMessageId(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetMessageId(uint256)"(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    "price()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updatePriceFeed(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePriceFeed(address,bytes32,tuple,uint256,uint256)"(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  messageId(overrides?: CallOverrides): Promise<BigNumber>;

  "messageId()"(overrides?: CallOverrides): Promise<BigNumber>;

  mockSetMessageId(
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetMessageId(uint256)"(
    _num: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  "price()"(overrides?: CallOverrides): Promise<BigNumber>;

  updatePriceFeed(
    _priceFeedAddrOnL2: string,
    _priceFeedKey: BytesLike,
    _price: { d: BigNumberish },
    _timestamp: BigNumberish,
    _roundId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePriceFeed(address,bytes32,tuple,uint256,uint256)"(
    _priceFeedAddrOnL2: string,
    _priceFeedKey: BytesLike,
    _price: { d: BigNumberish },
    _timestamp: BigNumberish,
    _roundId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    messageId(overrides?: CallOverrides): Promise<BigNumber>;

    "messageId()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSetMessageId(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetMessageId(uint256)"(
      _num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePriceFeed(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "updatePriceFeed(address,bytes32,tuple,uint256,uint256)"(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    messageId(overrides?: CallOverrides): Promise<BigNumber>;

    "messageId()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSetMessageId(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetMessageId(uint256)"(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    "price()"(overrides?: CallOverrides): Promise<BigNumber>;

    updatePriceFeed(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updatePriceFeed(address,bytes32,tuple,uint256,uint256)"(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    messageId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "messageId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSetMessageId(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetMessageId(uint256)"(
      _num: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "price()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updatePriceFeed(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePriceFeed(address,bytes32,tuple,uint256,uint256)"(
      _priceFeedAddrOnL2: string,
      _priceFeedKey: BytesLike,
      _price: { d: BigNumberish },
      _timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
