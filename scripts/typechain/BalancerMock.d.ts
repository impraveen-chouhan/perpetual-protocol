/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BalancerMockInterface extends ethers.utils.Interface {
  functions: {
    "getCurrentTokens()": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "mockSetCurrentTokens(address[])": FunctionFragment;
    "mockSetSpotPrice(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCurrentTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetCurrentTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetSpotPrice",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSetCurrentTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetSpotPrice",
    data: BytesLike
  ): Result;

  events: {};
}

export class BalancerMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BalancerMockInterface;

  functions: {
    getCurrentTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getCurrentTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetCurrentTokens(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetCurrentTokens(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetSpotPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetSpotPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

  "getCurrentTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getSpotPrice(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSpotPrice(address,address)"(
    tokenIn: string,
    tokenOut: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    perpToken: string,
    cUSDT: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    perpToken: string,
    cUSDT: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetCurrentTokens(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetCurrentTokens(address[])"(
    tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetSpotPrice(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetSpotPrice(uint256)"(
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getCurrentTokens(overrides?: CallOverrides): Promise<string[]>;

    "getCurrentTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      perpToken: string,
      cUSDT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      perpToken: string,
      cUSDT: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetCurrentTokens(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetCurrentTokens(address[])"(
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetSpotPrice(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetSpotPrice(uint256)"(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getCurrentTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetCurrentTokens(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetCurrentTokens(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetSpotPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetSpotPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCurrentTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCurrentTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpotPrice(address,address)"(
      tokenIn: string,
      tokenOut: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      perpToken: string,
      cUSDT: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetCurrentTokens(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetCurrentTokens(address[])"(
      tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetSpotPrice(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetSpotPrice(uint256)"(
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
