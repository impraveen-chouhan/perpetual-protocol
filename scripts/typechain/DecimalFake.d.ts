/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DecimalFakeInterface extends ethers.utils.Interface {
  functions: {
    "div(tuple,tuple)": FunctionFragment;
    "divScalar(tuple,uint256)": FunctionFragment;
    "mul(tuple,tuple)": FunctionFragment;
    "mulScalar(tuple,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "div",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "divScalar",
    values: [{ d: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mul",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mulScalar",
    values: [{ d: BigNumberish }, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "div", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "divScalar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mulScalar", data: BytesLike): Result;

  events: {};
}

export class DecimalFake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DecimalFakeInterface;

  functions: {
    div(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    "div(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    divScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    "divScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    mul(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    "mul(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    mulScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;

    "mulScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & { z: [BigNumber] & { d: BigNumber } }
    >;
  };

  div(
    x: { d: BigNumberish },
    y: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "div(tuple,tuple)"(
    x: { d: BigNumberish },
    y: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  divScalar(
    x: { d: BigNumberish },
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "divScalar(tuple,uint256)"(
    x: { d: BigNumberish },
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  mul(
    x: { d: BigNumberish },
    y: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "mul(tuple,tuple)"(
    x: { d: BigNumberish },
    y: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  mulScalar(
    x: { d: BigNumberish },
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "mulScalar(tuple,uint256)"(
    x: { d: BigNumberish },
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  callStatic: {
    div(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "div(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    divScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "divScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    mul(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "mul(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    mulScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "mulScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    div(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "div(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    divScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "divScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mul(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mul(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mulScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "mulScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    div(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "div(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    divScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "divScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mul(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mul(tuple,tuple)"(
      x: { d: BigNumberish },
      y: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mulScalar(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mulScalar(tuple,uint256)"(
      x: { d: BigNumberish },
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
