/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakedPerpTokenFakeInterface extends ethers.utils.Interface {
  functions: {
    "TOKEN_AMOUNT_LIMIT()": FunctionFragment;
    "addStakeModule(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "balanceOfAt(address,uint256)": FunctionFragment;
    "candidate()": FunctionFragment;
    "cooldownPeriod()": FunctionFragment;
    "decimals()": FunctionFragment;
    "getStakeModuleLength()": FunctionFragment;
    "initialize(address,uint256)": FunctionFragment;
    "isStakeModuleExisted(address)": FunctionFragment;
    "mock_getCurrentBlockNumber()": FunctionFragment;
    "mock_getCurrentTimestamp()": FunctionFragment;
    "mock_setBlockNumber(uint256)": FunctionFragment;
    "mock_setBlockTimestamp(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "perpToken()": FunctionFragment;
    "removeStakeModule(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "stake(tuple)": FunctionFragment;
    "stakeModules(uint256)": FunctionFragment;
    "stakerCooldown(address)": FunctionFragment;
    "stakerWithdrawPendingBalance(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "totalSupplyAt(uint256)": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "unstake()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addStakeModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOfAt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStakeModuleLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakeModuleExisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeStakeModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeModules",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerCooldown",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "stakerWithdrawPendingBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupplyAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addStakeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStakeModuleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isStakeModuleExisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStakeModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakerWithdrawPendingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupplyAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakeModuleAdded(address)": EventFragment;
    "StakeModuleRemoved(address)": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeModuleRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class StakedPerpTokenFake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakedPerpTokenFakeInterface;

  functions: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfAt(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOfAt(address,uint256)"(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    cooldownPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    getStakeModuleLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getStakeModuleLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256)"(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isStakeModuleExisted(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isStakeModuleExisted(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    perpToken(overrides?: CallOverrides): Promise<[string]>;

    "perpToken()"(overrides?: CallOverrides): Promise<[string]>;

    removeStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(tuple)"(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeModules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "stakeModules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    stakerCooldown(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "stakerCooldown(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stakerWithdrawPendingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "stakerWithdrawPendingBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupplyAt(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalSupplyAt(uint256)"(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unstake(overrides?: Overrides): Promise<ContractTransaction>;

    "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(overrides?: Overrides): Promise<ContractTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addStakeModule(
    _stakeModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addStakeModule(address)"(
    _stakeModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfAt(
    _owner: string,
    __blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOfAt(address,uint256)"(
    _owner: string,
    __blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  getStakeModuleLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getStakeModuleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _perpToken: string,
    _cooldownPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256)"(
    _perpToken: string,
    _cooldownPeriod: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isStakeModuleExisted(
    _stakeModule: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isStakeModuleExisted(address)"(
    _stakeModule: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_setBlockNumber(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockNumber(uint256)"(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setBlockTimestamp(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  perpToken(overrides?: CallOverrides): Promise<string>;

  "perpToken()"(overrides?: CallOverrides): Promise<string>;

  removeStakeModule(
    _stakeModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeStakeModule(address)"(
    _stakeModule: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(tuple)"(
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeModules(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "stakeModules(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  stakerCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "stakerCooldown(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stakerWithdrawPendingBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stakerWithdrawPendingBalance(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupplyAt(
    __blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalSupplyAt(uint256)"(
    __blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unstake(overrides?: Overrides): Promise<ContractTransaction>;

  "unstake()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(overrides?: Overrides): Promise<ContractTransaction>;

  "withdraw()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStakeModule(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addStakeModule(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    getStakeModuleLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakeModuleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256)"(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isStakeModuleExisted(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isStakeModuleExisted(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    perpToken(overrides?: CallOverrides): Promise<string>;

    "perpToken()"(overrides?: CallOverrides): Promise<string>;

    removeStakeModule(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeStakeModule(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(tuple)"(
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    stakeModules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "stakeModules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    stakerCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakerCooldown(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerWithdrawPendingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakerWithdrawPendingBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unstake(overrides?: CallOverrides): Promise<void>;

    "unstake()"(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    StakeModuleAdded(stakedModule: null): EventFilter;

    StakeModuleRemoved(stakedModule: null): EventFilter;

    Staked(staker: null, amount: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    Unstaked(staker: null, amount: null): EventFilter;

    Withdrawn(staker: null, amount: null): EventFilter;
  };

  estimateGas: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfAt(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOfAt(address,uint256)"(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    cooldownPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "cooldownPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStakeModuleLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakeModuleLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256)"(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isStakeModuleExisted(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isStakeModuleExisted(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    perpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "perpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(tuple)"(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeModules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakeModules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerCooldown(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "stakerCooldown(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stakerWithdrawPendingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stakerWithdrawPendingBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupplyAt(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalSupplyAt(uint256)"(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unstake(overrides?: Overrides): Promise<BigNumber>;

    "unstake()"(overrides?: Overrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_AMOUNT_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_AMOUNT_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfAt(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOfAt(address,uint256)"(
      _owner: string,
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cooldownPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cooldownPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStakeModuleLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStakeModuleLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256)"(
      _perpToken: string,
      _cooldownPeriod: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isStakeModuleExisted(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isStakeModuleExisted(address)"(
      _stakeModule: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "perpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeStakeModule(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeStakeModule(address)"(
      _stakeModule: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(tuple)"(
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeModules(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakeModules(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerCooldown(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakerCooldown(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakerWithdrawPendingBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakerWithdrawPendingBalance(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupplyAt(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalSupplyAt(uint256)"(
      __blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unstake(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unstake()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdraw()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
