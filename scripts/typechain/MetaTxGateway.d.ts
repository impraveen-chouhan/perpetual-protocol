/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MetaTxGatewayInterface extends ethers.utils.Interface {
  functions: {
    "addToWhitelists(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "initialize(string,string,uint256)": FunctionFragment;
    "isInWhitelists(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFromWhitelists(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addToWhitelists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isInWhitelists",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addToWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "MetaTransactionExecuted(address,address,address,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MetaTxGateway extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MetaTxGatewayInterface;

  functions: {
    addToWhitelists(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addToWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    executeMetaTransaction(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)"(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    initialize(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,uint256)"(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isInWhitelists(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isInWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeFromWhitelists(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFromWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addToWhitelists(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addToWhitelists(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  executeMetaTransaction(
    from: string,
    to: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)"(
    from: string,
    to: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getNonce(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _name: string,
    _version: string,
    _chainIdL1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,uint256)"(
    _name: string,
    _version: string,
    _chainIdL1: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isInWhitelists(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isInWhitelists(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFromWhitelists(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFromWhitelists(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addToWhitelists(_addr: string, overrides?: CallOverrides): Promise<void>;

    "addToWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    executeMetaTransaction(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)"(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,uint256)"(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isInWhitelists(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isInWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFromWhitelists(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    MetaTransactionExecuted(
      from: null,
      to: null,
      relayerAddress: null,
      functionSignature: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addToWhitelists(_addr: string, overrides?: Overrides): Promise<BigNumber>;

    "addToWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeMetaTransaction(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)"(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,uint256)"(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isInWhitelists(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isInWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromWhitelists(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFromWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addToWhitelists(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addToWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeMetaTransaction(address,address,bytes,bytes32,bytes32,uint8)"(
      from: string,
      to: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNonce(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,uint256)"(
      _name: string,
      _version: string,
      _chainIdL1: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isInWhitelists(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isInWhitelists(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromWhitelists(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFromWhitelists(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
