/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClearingHouseViewerInterface extends ethers.utils.Interface {
  functions: {
    "clearingHouse()": FunctionFragment;
    "getMarginRatio(address,address)": FunctionFragment;
    "getPersonalBalanceWithFundingPayment(address,address)": FunctionFragment;
    "getPersonalPositionWithFundingPayment(address,address)": FunctionFragment;
    "getUnrealizedPnl(address,address,uint8)": FunctionFragment;
    "isPositionNeedToBeMigrated(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersonalBalanceWithFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPersonalPositionWithFundingPayment",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnrealizedPnl",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPositionNeedToBeMigrated",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPersonalBalanceWithFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPersonalPositionWithFundingPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPositionNeedToBeMigrated",
    data: BytesLike
  ): Result;

  events: {};
}

export class ClearingHouseViewer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClearingHouseViewerInterface;

  functions: {
    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<[string]>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & {
        margin: [BigNumber] & { d: BigNumber };
      }
    >;

    "getPersonalBalanceWithFundingPayment(address,address)"(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }] & {
        margin: [BigNumber] & { d: BigNumber };
      }
    >;

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        };
      }
    >;

    "getPersonalPositionWithFundingPayment(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        };
      }
    >;

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    isPositionNeedToBeMigrated(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPositionNeedToBeMigrated(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

  getMarginRatio(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getMarginRatio(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getPersonalBalanceWithFundingPayment(
    _quoteToken: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getPersonalBalanceWithFundingPayment(address,address)"(
    _quoteToken: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getPersonalPositionWithFundingPayment(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "getPersonalPositionWithFundingPayment(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  getUnrealizedPnl(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUnrealizedPnl(address,address,uint8)"(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  isPositionNeedToBeMigrated(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPositionNeedToBeMigrated(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    clearingHouse(overrides?: CallOverrides): Promise<string>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getPersonalBalanceWithFundingPayment(address,address)"(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "getPersonalPositionWithFundingPayment(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    isPositionNeedToBeMigrated(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPositionNeedToBeMigrated(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPersonalBalanceWithFundingPayment(address,address)"(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPersonalPositionWithFundingPayment(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPositionNeedToBeMigrated(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPositionNeedToBeMigrated(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPersonalBalanceWithFundingPayment(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPersonalBalanceWithFundingPayment(address,address)"(
      _quoteToken: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPersonalPositionWithFundingPayment(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPersonalPositionWithFundingPayment(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPositionNeedToBeMigrated(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPositionNeedToBeMigrated(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
