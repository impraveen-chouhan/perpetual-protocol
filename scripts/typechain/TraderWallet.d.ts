/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TraderWalletInterface extends ethers.utils.Interface {
  functions: {
    "clearingHouse()": FunctionFragment;
    "closePosition(address)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)": FunctionFragment;
    "openPosition(address,uint8,tuple,tuple,tuple)": FunctionFragment;
    "threeLiquidations(address,address,address,address)": FunctionFragment;
    "twoLiquidations(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiActions",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      string,
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish },
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      string,
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "threeLiquidations",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "twoLiquidations",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multiActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "threeLiquidations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "twoLiquidations",
    data: BytesLike
  ): Result;

  events: {};
}

export class TraderWallet extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TraderWalletInterface;

  functions: {
    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<[string]>;

    closePosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    multiActions(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)"(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    threeLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "threeLiquidations(address,address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    twoLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "twoLiquidations(address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

  closePosition(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closePosition(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidate(
    _amm: string,
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  multiActions(
    _action1: BigNumberish,
    _setRestriction: boolean,
    _action2: BigNumberish,
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)"(
    _action1: BigNumberish,
    _setRestriction: boolean,
    _action2: BigNumberish,
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  openPosition(
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _minBaseAssetAmount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openPosition(address,uint8,tuple,tuple,tuple)"(
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _minBaseAssetAmount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  threeLiquidations(
    _amm: string,
    _trader1: string,
    _trader2: string,
    _trader3: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "threeLiquidations(address,address,address,address)"(
    _amm: string,
    _trader1: string,
    _trader2: string,
    _trader3: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  twoLiquidations(
    _amm: string,
    _trader1: string,
    _trader2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "twoLiquidations(address,address,address)"(
    _amm: string,
    _trader1: string,
    _trader2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    clearingHouse(overrides?: CallOverrides): Promise<string>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

    closePosition(_amm: string, overrides?: CallOverrides): Promise<void>;

    "closePosition(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    multiActions(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)"(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    threeLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "threeLiquidations(address,address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: CallOverrides
    ): Promise<void>;

    twoLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "twoLiquidations(address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "closePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    multiActions(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)"(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    threeLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "threeLiquidations(address,address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    twoLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "twoLiquidations(address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    multiActions(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "multiActions(uint8,bool,uint8,address,uint8,tuple,tuple,tuple,address)"(
      _action1: BigNumberish,
      _setRestriction: boolean,
      _action2: BigNumberish,
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _minBaseAssetAmount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    threeLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "threeLiquidations(address,address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      _trader3: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    twoLiquidations(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "twoLiquidations(address,address,address)"(
      _amm: string,
      _trader1: string,
      _trader2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
