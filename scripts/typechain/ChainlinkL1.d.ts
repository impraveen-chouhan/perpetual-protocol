/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ChainlinkL1Interface extends ethers.utils.Interface {
  functions: {
    "addAggregator(bytes32,address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "getAggregator(bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "prevTimestampMap(bytes32)": FunctionFragment;
    "priceFeedKeys(uint256)": FunctionFragment;
    "priceFeedL2Address()": FunctionFragment;
    "priceFeedMap(bytes32)": FunctionFragment;
    "removeAggregator(bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rootBridge()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setPriceFeedL2(address)": FunctionFragment;
    "setRootBridge(address)": FunctionFragment;
    "updateLatestRoundData(bytes32)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addAggregator",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAggregator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevTimestampMap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedKeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedL2Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceFeedMap",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAggregator",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rootBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPriceFeedL2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLatestRoundData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevTimestampMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedL2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceFeedL2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLatestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceFeedL2Changed(address)": EventFragment;
    "PriceUpdateMessageIdSent(bytes32)": EventFragment;
    "PriceUpdated(uint80,uint256,uint256)": EventFragment;
    "RootBridgeChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceFeedL2Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdateMessageIdSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootBridgeChanged"): EventFragment;
}

export class ChainlinkL1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ChainlinkL1Interface;

  functions: {
    addAggregator(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addAggregator(bytes32,address)"(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    getAggregator(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    prevTimestampMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "prevTimestampMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    priceFeedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "priceFeedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    priceFeedL2Address(overrides?: CallOverrides): Promise<[string]>;

    "priceFeedL2Address()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "priceFeedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAggregator(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rootBridge(overrides?: CallOverrides): Promise<[string]>;

    "rootBridge()"(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPriceFeedL2(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceFeedL2(address)"(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRootBridge(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRootBridge(address)"(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateLatestRoundData(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateLatestRoundData(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  addAggregator(
    _priceFeedKey: BytesLike,
    _aggregator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addAggregator(bytes32,address)"(
    _priceFeedKey: BytesLike,
    _aggregator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  getAggregator(
    _priceFeedKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getAggregator(bytes32)"(
    _priceFeedKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _rootBridge: string,
    _priceFeedL2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _rootBridge: string,
    _priceFeedL2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  prevTimestampMap(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "prevTimestampMap(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  priceFeedKeys(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "priceFeedKeys(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  priceFeedL2Address(overrides?: CallOverrides): Promise<string>;

  "priceFeedL2Address()"(overrides?: CallOverrides): Promise<string>;

  priceFeedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "priceFeedMap(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAggregator(
    _priceFeedKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAggregator(bytes32)"(
    _priceFeedKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rootBridge(overrides?: CallOverrides): Promise<string>;

  "rootBridge()"(overrides?: CallOverrides): Promise<string>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPriceFeedL2(
    _priceFeedL2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceFeedL2(address)"(
    _priceFeedL2: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRootBridge(
    _rootBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRootBridge(address)"(
    _rootBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateLatestRoundData(
    _priceFeedKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateLatestRoundData(bytes32)"(
    _priceFeedKey: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    addAggregator(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addAggregator(bytes32,address)"(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    getAggregator(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    prevTimestampMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevTimestampMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "priceFeedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    priceFeedL2Address(overrides?: CallOverrides): Promise<string>;

    "priceFeedL2Address()"(overrides?: CallOverrides): Promise<string>;

    priceFeedMap(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "priceFeedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAggregator(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rootBridge(overrides?: CallOverrides): Promise<string>;

    "rootBridge()"(overrides?: CallOverrides): Promise<string>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceFeedL2(
      _priceFeedL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceFeedL2(address)"(
      _priceFeedL2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootBridge(
      _rootBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRootBridge(address)"(
      _rootBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLatestRoundData(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateLatestRoundData(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PriceFeedL2Changed(priceFeedL2: null): EventFilter;

    PriceUpdateMessageIdSent(messageId: null): EventFilter;

    PriceUpdated(roundId: null, price: null, timestamp: null): EventFilter;

    RootBridgeChanged(rootBridge: null): EventFilter;
  };

  estimateGas: {
    addAggregator(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addAggregator(bytes32,address)"(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAggregator(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    prevTimestampMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "prevTimestampMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceFeedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceFeedL2Address(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeedL2Address()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceFeedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAggregator(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rootBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "rootBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPriceFeedL2(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceFeedL2(address)"(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRootBridge(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRootBridge(address)"(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateLatestRoundData(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateLatestRoundData(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addAggregator(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAggregator(bytes32,address)"(
      _priceFeedKey: BytesLike,
      _aggregator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAggregator(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _rootBridge: string,
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevTimestampMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "prevTimestampMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedKeys(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceFeedKeys(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedL2Address(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceFeedL2Address()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeedMap(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceFeedMap(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAggregator(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAggregator(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rootBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rootBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPriceFeedL2(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceFeedL2(address)"(
      _priceFeedL2: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRootBridge(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRootBridge(address)"(
      _rootBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateLatestRoundData(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateLatestRoundData(bytes32)"(
      _priceFeedKey: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
