/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MetaTxRecipientMock } from "../MetaTxRecipientMock";

export class MetaTxRecipientMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _trustedForwarder: string,
    overrides?: Overrides
  ): Promise<MetaTxRecipientMock> {
    return super.deploy(
      _trustedForwarder,
      overrides || {}
    ) as Promise<MetaTxRecipientMock>;
  }
  getDeployTransaction(
    _trustedForwarder: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_trustedForwarder, overrides || {});
  }
  attach(address: string): MetaTxRecipientMock {
    return super.attach(address) as MetaTxRecipientMock;
  }
  connect(signer: Signer): MetaTxRecipientMock__factory {
    return super.connect(signer) as MetaTxRecipientMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MetaTxRecipientMock {
    return new Contract(address, _abi, signerOrProvider) as MetaTxRecipientMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_trustedForwarder",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "error",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "poke",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pokedBy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "trustedForwarder",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "versionRecipient",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260056080819052640312e302e360dc1b60a0908152610026916001919061007c565b5034801561003357600080fd5b5060405161041f38038061041f8339818101604052602081101561005657600080fd5b5051600080546001600160a01b0319166001600160a01b03909216919091179055610117565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100bd57805160ff19168380011785556100ea565b828001600101855582156100ea579182015b828111156100ea5782518255916020019190600101906100cf565b506100f69291506100fa565b5090565b61011491905b808211156100f65760008155600101610100565b90565b6102f9806101266000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631817835814610067578063486ff0cd14610071578063572b6c05146100ee5780637da0a87714610128578063c79f8b621461014c578063dfc32df614610154575b600080fd5b61006f61015c565b005b610079610186565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100b357818101518382015260200161009b565b50505050905090810190601f1680156100e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101146004803603602081101561010457600080fd5b50356001600160a01b0316610213565b604080519115158252519081900360200190f35b610130610227565b604080516001600160a01b039092168252519081900360200190f35b61006f610236565b610130610283565b610164610292565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561020b5780601f106101e05761010080835404028352916020019161020b565b820191906000526020600020905b8154815290600101906020018083116101ee57829003601f168201915b505050505081565b6000546001600160a01b0390811691161490565b6000546001600160a01b031681565b6040805162461bcd60e51b815260206004820152601a60248201527f4d6574615478526563697069656e744d6f636b3a204572726f72000000000000604482015290519081900360640190fd5b6002546001600160a01b031681565b6000601836108015906102a957506102a933610213565b156102bd575060131936013560601c6102c0565b50335b9056fea2646970667358221220510dfd7a624bd4519616ea3305c8774d255f934697d513f68cb2b4717346dfb064736f6c63430006090033";
