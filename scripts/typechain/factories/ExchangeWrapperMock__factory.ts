/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ExchangeWrapperMock } from "../ExchangeWrapperMock";

export class ExchangeWrapperMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ExchangeWrapperMock> {
    return super.deploy(overrides || {}) as Promise<ExchangeWrapperMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExchangeWrapperMock {
    return super.attach(address) as ExchangeWrapperMock;
  }
  connect(signer: Signer): ExchangeWrapperMock__factory {
    return super.connect(signer) as ExchangeWrapperMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExchangeWrapperMock {
    return new Contract(address, _abi, signerOrProvider) as ExchangeWrapperMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "inputTokenSold",
        type: "tuple",
      },
    ],
    name: "getInputPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "outputTokenBought",
        type: "tuple",
      },
    ],
    name: "getOutputPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    name: "getSpotPrice",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mockSetException",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "_ratio",
        type: "tuple",
      },
    ],
    name: "mockSetSwapRatio",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "_price",
        type: "tuple",
      },
    ],
    name: "mockSpotPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "outputToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "inputTokenSold",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    name: "swapInput",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "inputToken",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "outputToken",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "outputTokenBought",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    name: "swapOutput",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "d",
            type: "uint256",
          },
        ],
        internalType: "struct Decimal.decimal",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405261001661004d60201b6102ee1760201c565b5160335561002d61004d602090811b6102ee17901c565b516034556035805460ff1916905534801561004757600080fd5b5061007b565b610055610068565b5060408051602081019091526000815290565b6040518060200160405280600081525090565b610f118061008a6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c643ea631161005b578063c643ea63146100e6578063c73971f9146100f9578063e5e75d1e1461010c578063ebbdfcfb1461011f57610088565b806314cd6e191461008d57806315e84af91461009757806333967151146100c0578063c1094e5b146100d3575b600080fd5b610095610132565b005b6100aa6100a5366004610b3b565b610141565b6040516100b79190610e8d565b60405180910390f35b6100aa6100ce366004610bba565b610161565b6100aa6100e1366004610b73565b6101fd565b6100aa6100f4366004610b73565b61023c565b610095610107366004610c25565b610267565b6100aa61011a366004610bba565b61026d565b61009561012d366004610c25565b6102e8565b6035805460ff19166001179055565b610149610af1565b50604080516020810190915260345481525b92915050565b610169610af1565b60355460ff161561017957600080fd5b604080516020810190915260335481526101b7908790339030906101b2906101a6368b90038b018b610c25565b9063ffffffff61030916565b610335565b6101d085336101cb36889003880188610c25565b610470565b604080516020810190915260335481526101f3906101a636879003870187610c25565b9695505050505050565b610205610af1565b604080516020810190915260335481526102349061022836859003850185610c25565b9063ffffffff61059f16565b949350505050565b610244610af1565b60408051602081019091526033548152610234906101a636859003850185610c25565b51603455565b610275610af1565b60355460ff161561028557600080fd5b61029a8633306101b236899003890189610c25565b604080516020810190915260335481526102c590869033906101cb90610228368a90038a018a610c25565b604080516020810190915260335481526101f39061022836879003870187610c25565b51603355565b6102f6610af1565b5060408051602081019091526000815290565b610311610af1565b610319610af1565b8251845161032c9163ffffffff6105c216565b81529392505050565b61033e846105d7565b610346610af1565b6103508584610624565b9050600061035e86846106b1565b905060006060876001600160a01b03166323b872dd60e01b88888660405160240161038b93929190610caa565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516103c99190610c7a565b6000604051808303816000865af19150503d8060008114610406576040519150601f19603f3d011682016040523d82523d6000602084013e61040b565b606091505b50915091508180156104355750805115806104355750808060200190518101906104359190610b1b565b61045a5760405162461bcd60e51b815260040161045190610dc9565b60405180910390fd5b61046688878587610727565b5050505050505050565b610479836105d7565b610481610af1565b61048b8484610624565b9050600061049985846106b1565b905060006060866001600160a01b031663a9059cbb60e01b87856040516024016104c4929190610cce565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516105029190610c7a565b6000604051808303816000865af19150503d806000811461053f576040519150601f19603f3d011682016040523d82523d6000602084013e610544565b606091505b509150915081801561056e57508051158061056e57508080602001905181019061056e9190610b1b565b61058a5760405162461bcd60e51b815260040161045190610d1a565b61059687878587610727565b50505050505050565b6105a7610af1565b6105af610af1565b8251845161032c9163ffffffff61078016565b60006105d08383601261078e565b9392505050565b60006105e2826107ac565b6001600160a01b0383166000908152602081905260409020549091508114610620576001600160a01b03821660009081526020819052604090208190555b5050565b61062c610af1565b6105d083846001600160a01b03166370a08231856040518263ffffffff1660e01b815260040161065c9190610c96565b60206040518083038186803b15801561067457600080fd5b505afa158015610688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ac9190610c62565b610899565b6000806106bd846107ac565b9050601281106106fb576106f36106db82601263ffffffff61092b16565b600a0a6106e78561096d565b9063ffffffff61097116565b91505061015b565b61023461070f60128363ffffffff61092b16565b600a0a61071b8561096d565b9063ffffffff6109ab16565b61075a6107446107378685610899565b839063ffffffff6109ed16565b61074e8686610624565b9063ffffffff610a1016565b60000b1561077a5760405162461bcd60e51b815260040161045190610e4b565b50505050565b60006105d083836012610a41565b600061023461079c83610a60565b61071b868663ffffffff61097116565b6001600160a01b0381166000908152602081905260408120548061015b5760408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000916060916001600160a01b0387169161080e91610c7a565b600060405180830381855afa9150503d8060008114610849576040519150601f19603f3d011682016040523d82523d6000602084013e61084e565b606091505b50915091508180156108605750805115155b61087c5760405162461bcd60e51b815260040161045190610d88565b808060200190518101906108909190610c62565b95945050505050565b6108a1610af1565b60006108ac846107ac565b9050601281106108f1576040805160208101909152806108e66108d684601263ffffffff61092b16565b8690600a0a63ffffffff6109ab16565b81525091505061015b565b60408051602081019091528061092161091160128563ffffffff61092b16565b8690600a0a63ffffffff61097116565b9052949350505050565b60006105d083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610a69565b5190565b6000826109805750600061015b565b8282028284828161098d57fe5b04146105d05760405162461bcd60e51b815260040161045190610e0a565b60006105d083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610a95565b6109f5610af1565b6109fd610af1565b8251845161032c9163ffffffff610acc16565b805182516000911015610a255750600161015b565b815183511015610a38575060001961015b565b50600092915050565b60006102348361071b610a5385610a60565b879063ffffffff61097116565b60ff16600a0a90565b60008184841115610a8d5760405162461bcd60e51b81526004016104519190610ce7565b505050900390565b60008183610ab65760405162461bcd60e51b81526004016104519190610ce7565b506000838581610ac257fe5b0495945050505050565b6000828201838110156105d05760405162461bcd60e51b815260040161045190610d51565b6040518060200160405280600081525090565b600060208284031215610b15578081fd5b50919050565b600060208284031215610b2c578081fd5b815180151581146105d0578182fd5b60008060408385031215610b4d578081fd5b8235610b5881610ec3565b91506020830135610b6881610ec3565b809150509250929050565b600080600060608486031215610b87578081fd5b8335610b9281610ec3565b92506020840135610ba281610ec3565b9150610bb18560408601610b04565b90509250925092565b600080600080600060a08688031215610bd1578081fd5b8535610bdc81610ec3565b94506020860135610bec81610ec3565b9350610bfb8760408801610b04565b9250610c0a8760608801610b04565b9150610c198760808801610b04565b90509295509295909350565b600060208284031215610c36578081fd5b6040516020810181811067ffffffffffffffff82111715610c55578283fd5b6040529135825250919050565b600060208284031215610c73578081fd5b5051919050565b60008251610c8c818460208701610e97565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6000602082528251806020840152610d06816040850160208701610e97565b601f01601f19169190910160400192915050565b6020808252601d908201527f446563696d616c45524332303a207472616e73666572206661696c6564000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526021908201527f446563696d616c45524332303a2067657420646563696d616c73206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f446563696d616c45524332303a207472616e7366657246726f6d206661696c656040820152601960fa1b606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b60208082526022908201527f446563696d616c45524332303a2062616c616e636520696e636f6e73697374656040820152611b9d60f21b606082015260800190565b9051815260200190565b60005b83811015610eb2578181015183820152602001610e9a565b8381111561077a5750506000910152565b6001600160a01b0381168114610ed857600080fd5b5056fea2646970667358221220a564924a9b1b516112d80f6e10e060537d9fdf3c335e28aed5f8736a05128b4964736f6c63430006090033";
