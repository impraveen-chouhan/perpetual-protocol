/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { UpgradableContractV2 } from "../UpgradableContractV2";

export class UpgradableContractV2__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<UpgradableContractV2> {
    return super.deploy(overrides || {}) as Promise<UpgradableContractV2>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UpgradableContractV2 {
    return super.attach(address) as UpgradableContractV2;
  }
  connect(signer: Signer): UpgradableContractV2__factory {
    return super.connect(signer) as UpgradableContractV2__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradableContractV2 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UpgradableContractV2;
  }
}

const _abi = [
  {
    inputs: [],
    name: "increaseVersion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e4806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634a502e4a1461005157806354fd4d501461005b5780638129fc1c146100755780638da5cb5b1461007d575b600080fd5b6100596100a1565b005b6100636100ac565b60408051918252519081900360200190f35b6100596100b2565b61008561016b565b604080516001600160a01b039092168252519081900360200190f35b603380546001019055565b60335481565b600054610100900460ff16806100cb57506100cb61017a565b806100d9575060005460ff16155b6101145760405162461bcd60e51b815260040180806020018281038252602e815260200180610181602e913960400191505060405180910390fd5b600054610100900460ff1615801561013f576000805460ff1961ff0019909116610100171660011790555b6002603355603480546001600160a01b031916331790558015610168576000805461ff00191690555b50565b6034546001600160a01b031681565b303b159056fe436f6e747261637420696e7374616e63652068617320616c7265616479206265656e20696e697469616c697a6564a264697066735822122012e4d16590d2416a8b00bc2e9ee955729c38a9346a349a855fdfbdd895603b5264736f6c63430006090033";
