/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { ChainlinkL1Mock } from "../ChainlinkL1Mock";

export class ChainlinkL1Mock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<ChainlinkL1Mock> {
    return super.deploy(overrides || {}) as Promise<ChainlinkL1Mock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainlinkL1Mock {
    return super.attach(address) as ChainlinkL1Mock;
  }
  connect(signer: Signer): ChainlinkL1Mock__factory {
    return super.connect(signer) as ChainlinkL1Mock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainlinkL1Mock {
    return new Contract(address, _abi, signerOrProvider) as ChainlinkL1Mock;
  }
}

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "PriceUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "_startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_answeredInRound",
        type: "uint80",
      },
    ],
    name: "mockAddAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "updateLatestRoundData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105a4806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637284e4161161005b5780637284e416146100fe5780639a6fc8f51461017b578063f463e18e146101dd578063feaf968c146101fa5761007d565b80630cc6be4e14610082578063313ce567146100c657806354fd4d50146100e4575b600080fd5b6100c4600480360360a081101561009857600080fd5b506001600160501b03813581169160208101359160408201359160608101359160809091013516610202565b005b6100ce610335565b6040805160ff9092168252519081900360200190f35b6100ec61033a565b60408051918252519081900360200190f35b61010661033f565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610140578181015183820152602001610128565b50505050905090810190601f16801561016d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101a16004803603602081101561019157600080fd5b50356001600160501b0316610351565b604080516001600160501b0396871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b6100c4600480360360208110156101f357600080fd5b503561044c565b6101a1610494565b600080546001818101835560038083047f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160501b039a8b16600a95849006860261010090810a918202918d021990921617909155825480840184557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60198909855600280548084019091557f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0196909655855480820187557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b01949094556004805494850181559091528383047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b018054928716949093060290930a9182029190930219909116179055565b600890565b600090565b60408051602081019091526000815290565b600080600080600080866001600160501b03168154811061036e57fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03166001876001600160501b0316815481106103ad57fe5b90600052602060002001546002886001600160501b0316815481106103ce57fe5b90600052602060002001546003896001600160501b0316815481106103ef57fe5b906000526020600020015460048a6001600160501b03168154811061041057fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03169450945094509450945091939590929450565b60408051606481526101f46020820152635611c2308183015290517f15819dd2fd9f6418b142e798d08a18d0bf06ea368f4480b7b0d3f75bd966bc489181900360600190a150565b6000806000806000806001600080549050039050600081815481106104b557fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b0316600182815481106104eb57fe5b90600052602060002001546002838154811061050357fe5b90600052602060002001546003848154811061051b57fe5b90600052602060002001546004858154811061053357fe5b9060005260206000209060039182820401919006600a029054906101000a90046001600160501b03169550955095509550955050909192939456fea26469706673582212209efcaadd22108f1630a12d51d3453fc09f61c84a94f06e015e99c1b04dda7ba964736f6c63430006090033";
