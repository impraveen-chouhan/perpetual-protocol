/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AMBBridgeMock } from "../AMBBridgeMock";

export class AMBBridgeMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<AMBBridgeMock> {
    return super.deploy(overrides || {}) as Promise<AMBBridgeMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): AMBBridgeMock {
    return super.attach(address) as AMBBridgeMock;
  }
  connect(signer: Signer): AMBBridgeMock__factory {
    return super.connect(signer) as AMBBridgeMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AMBBridgeMock {
    return new Contract(address, _abi, signerOrProvider) as AMBBridgeMock;
  }
}

const _abi = [
  {
    inputs: [],
    name: "messageId",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "messageSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_msgId",
        type: "bytes32",
      },
    ],
    name: "mockSetMessageId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_addr",
        type: "address",
      },
    ],
    name: "mockSetMessageSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_contract",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_gas",
        type: "uint256",
      },
    ],
    name: "requireToPassMessage",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061028c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063240b63311461005c5780632afb2dab1461007b578063669f618b146100a1578063d67bdd25146100bb578063dc8601b3146100df575b600080fd5b6100796004803603602081101561007257600080fd5b503561015f565b005b6100796004803603602081101561009157600080fd5b50356001600160a01b0316610164565b6100a9610186565b60408051918252519081900360200190f35b6100c361018c565b604080516001600160a01b039092168252519081900360200190f35b6100a9600480360360608110156100f557600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561012057600080fd5b82018360208201111561013257600080fd5b8035906020019184600183028401116401000000008311171561015457600080fd5b91935091503561019b565b600155565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60015490565b6000546001600160a01b031690565b6000806060866001600160a01b03168686604051808383808284376040519201945060009350909150508083038183865af19150503d80600081146101fc576040519150601f19603f3d011682016040523d82523d6000602084013e610201565b606091505b509150915081610248576040805162461bcd60e51b815260206004820152600d60248201526c32bc32b1baba329032b93937b960991b604482015290519081900360640190fd5b50506001549594505050505056fea2646970667358221220c17b4530dd62af4ccab855c8dd698d0aacef1a6190efbe68974485ed7ad5dde764736f6c63430006090033";
