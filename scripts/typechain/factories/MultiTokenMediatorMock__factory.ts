/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MultiTokenMediatorMock } from "../MultiTokenMediatorMock";

export class MultiTokenMediatorMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MultiTokenMediatorMock> {
    return super.deploy(overrides || {}) as Promise<MultiTokenMediatorMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MultiTokenMediatorMock {
    return super.attach(address) as MultiTokenMediatorMock;
  }
  connect(signer: Signer): MultiTokenMediatorMock__factory {
    return super.connect(signer) as MultiTokenMediatorMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiTokenMediatorMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiTokenMediatorMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "relayTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ad58bdd114610030575b600080fd5b61004361003e3660046100cd565b610045565b005b6040516323b872dd60e01b81526001600160a01b038416906323b872dd9061007590339030908690600401610134565b602060405180830381600087803b15801561008f57600080fd5b505af11580156100a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100c7919061010d565b50505050565b6000806000606084860312156100e1578283fd5b83356100ec81610158565b925060208401356100fc81610158565b929592945050506040919091013590565b60006020828403121561011e578081fd5b8151801515811461012d578182fd5b9392505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b038116811461016d57600080fd5b5056fea26469706673582212204ce685878a2d60778242e9dd800f027e64791dfd66d77b4081999e5220667fa864736f6c63430006090033";
