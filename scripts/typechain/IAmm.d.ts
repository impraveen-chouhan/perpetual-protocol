/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IAmmInterface extends ethers.utils.Interface {
  functions: {
    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)": FunctionFragment;
    "calcFee(tuple)": FunctionFragment;
    "getBaseAssetDeltaThisFundingPeriod()": FunctionFragment;
    "getCumulativeNotional()": FunctionFragment;
    "getInputPrice(uint8,tuple)": FunctionFragment;
    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)": FunctionFragment;
    "getInputTwap(uint8,tuple)": FunctionFragment;
    "getLiquidityChangedSnapshots(uint256)": FunctionFragment;
    "getLiquidityHistoryLength()": FunctionFragment;
    "getMaxHoldingBaseAsset()": FunctionFragment;
    "getOpenInterestNotionalCap()": FunctionFragment;
    "getOutputPrice(uint8,tuple)": FunctionFragment;
    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)": FunctionFragment;
    "getOutputTwap(uint8,tuple)": FunctionFragment;
    "getSettlementPrice()": FunctionFragment;
    "getSpotPrice()": FunctionFragment;
    "migrateLiquidity(tuple,tuple)": FunctionFragment;
    "open()": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "settleFunding()": FunctionFragment;
    "shutdown()": FunctionFragment;
    "swapInput(uint8,tuple,tuple)": FunctionFragment;
    "swapOutput(uint8,tuple,tuple,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calcBaseAssetAfterLiquidityMigration",
    values: [{ d: BigNumberish }, { d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFee",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseAssetDeltaThisFundingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeNotional",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPriceWithReserves",
    values: [
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputTwap",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityChangedSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxHoldingBaseAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterestNotionalCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPriceWithReserves",
    values: [
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputTwap",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLiquidity",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleFunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [BigNumberish, { d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [BigNumberish, { d: BigNumberish }, { d: BigNumberish }, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "calcBaseAssetAfterLiquidityMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseAssetDeltaThisFundingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPriceWithReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityChangedSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHoldingBaseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterestNotionalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPriceWithReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;

  events: {};
}

export class IAmm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IAmmInterface;

  functions: {
    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSpotPrice(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSpotPrice()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    open(overrides?: CallOverrides): Promise<[boolean]>;

    "open()"(overrides?: CallOverrides): Promise<[boolean]>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<[string]>;

    settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

    shutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  calcBaseAssetAfterLiquidityMigration(
    _baseAssetAmount: { d: BigNumberish },
    _fromQuoteReserve: { d: BigNumberish },
    _fromBaseReserve: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
    _baseAssetAmount: { d: BigNumberish },
    _fromQuoteReserve: { d: BigNumberish },
    _fromBaseReserve: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  calcFee(
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  "calcFee(tuple)"(
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  getBaseAssetDeltaThisFundingPeriod(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getBaseAssetDeltaThisFundingPeriod()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getCumulativeNotional(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getCumulativeNotional()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputPrice(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPrice(uint8,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputPriceWithReserves(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputTwap(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputTwap(uint8,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getLiquidityChangedSnapshots(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  "getLiquidityChangedSnapshots(uint256)"(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidityHistoryLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxHoldingBaseAsset(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getMaxHoldingBaseAsset()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOpenInterestNotionalCap(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOpenInterestNotionalCap()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPrice(uint8,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPriceWithReserves(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputTwap(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputTwap(uint8,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSettlementPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSettlementPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSpotPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSpotPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  migrateLiquidity(
    _liquidityMultiplier: { d: BigNumberish },
    _priceLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateLiquidity(tuple,tuple)"(
    _liquidityMultiplier: { d: BigNumberish },
    _priceLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  open(overrides?: CallOverrides): Promise<boolean>;

  "open()"(overrides?: CallOverrides): Promise<boolean>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

  settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

  "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

  shutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  swapInput(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapInput(uint8,tuple,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOutput(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetAmountLimit: { d: BigNumberish },
    _skipFluctuationCheck: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOutput(uint8,tuple,tuple,bool)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetAmountLimit: { d: BigNumberish },
    _skipFluctuationCheck: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSpotPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSpotPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    open(overrides?: CallOverrides): Promise<boolean>;

    "open()"(overrides?: CallOverrides): Promise<boolean>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

    settleFunding(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "settleFunding()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    "shutdown()"(overrides?: CallOverrides): Promise<void>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

    "getCumulativeNotional()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxHoldingBaseAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSettlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getSettlementPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getSpotPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<BigNumber>;

    "open()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    settleFunding(overrides?: Overrides): Promise<BigNumber>;

    "settleFunding()"(overrides?: Overrides): Promise<BigNumber>;

    shutdown(overrides?: Overrides): Promise<BigNumber>;

    "shutdown()"(overrides?: Overrides): Promise<BigNumber>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityHistoryLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSpotPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _priceLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    open(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "open()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settleFunding(overrides?: Overrides): Promise<PopulatedTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    shutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
