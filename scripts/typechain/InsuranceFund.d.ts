/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface InsuranceFundInterface extends ethers.utils.Interface {
  functions: {
    "addAmm(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "exchange()": FunctionFragment;
    "getAllAmms()": FunctionFragment;
    "getQuoteTokenLength()": FunctionFragment;
    "inflationMonitor()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isExistedAmm(address)": FunctionFragment;
    "minter()": FunctionFragment;
    "owner()": FunctionFragment;
    "perpToken()": FunctionFragment;
    "quoteTokens(uint256)": FunctionFragment;
    "removeAmm(address)": FunctionFragment;
    "removeToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBeneficiary(address)": FunctionFragment;
    "setExchange(address)": FunctionFragment;
    "setInflationMonitor(address)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "shutdownAllAmm()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "withdraw(address,tuple)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAmm", values: [string]): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(functionFragment: "exchange", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllAmms",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inflationMonitor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isExistedAmm",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perpToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quoteTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "removeAmm", values: [string]): string;
  encodeFunctionData(functionFragment: "removeToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setExchange", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setInflationMonitor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setMinter", values: [string]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shutdownAllAmm",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, { d: BigNumberish }]
  ): string;

  decodeFunctionResult(functionFragment: "addAmm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllAmms", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inflationMonitor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isExistedAmm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perpToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeAmm", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInflationMonitor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shutdownAllAmm",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AmmAdded(address)": EventFragment;
    "AmmRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ShutdownAllAmms(uint256)": EventFragment;
    "TokenAdded(address)": EventFragment;
    "TokenRemoved(address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmmAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AmmRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ShutdownAllAmms"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class InsuranceFund extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: InsuranceFundInterface;

  functions: {
    addAmm(_amm: string, overrides?: Overrides): Promise<ContractTransaction>;

    "addAmm(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    exchange(overrides?: CallOverrides): Promise<[string]>;

    "exchange()"(overrides?: CallOverrides): Promise<[string]>;

    getAllAmms(overrides?: CallOverrides): Promise<[string[]]>;

    "getAllAmms()"(overrides?: CallOverrides): Promise<[string[]]>;

    getQuoteTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getQuoteTokenLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    inflationMonitor(overrides?: CallOverrides): Promise<[string]>;

    "inflationMonitor()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isExistedAmm(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    "minter()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    perpToken(overrides?: CallOverrides): Promise<[string]>;

    "perpToken()"(overrides?: CallOverrides): Promise<[string]>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "quoteTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAmm(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAmm(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setExchange(
      _exchange: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setExchange(address)"(
      _exchange: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInflationMonitor(address)"(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinter(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    shutdownAllAmm(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdownAllAmm()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(address,tuple)"(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAmm(_amm: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addAmm(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  exchange(overrides?: CallOverrides): Promise<string>;

  "exchange()"(overrides?: CallOverrides): Promise<string>;

  getAllAmms(overrides?: CallOverrides): Promise<string[]>;

  "getAllAmms()"(overrides?: CallOverrides): Promise<string[]>;

  getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getQuoteTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  inflationMonitor(overrides?: CallOverrides): Promise<string>;

  "inflationMonitor()"(overrides?: CallOverrides): Promise<string>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<boolean>;

  "isExistedAmm(address)"(
    _amm: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minter(overrides?: CallOverrides): Promise<string>;

  "minter()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  perpToken(overrides?: CallOverrides): Promise<string>;

  "perpToken()"(overrides?: CallOverrides): Promise<string>;

  quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "quoteTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAmm(_amm: string, overrides?: Overrides): Promise<ContractTransaction>;

  "removeAmm(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBeneficiary(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBeneficiary(address)"(
    _beneficiary: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setExchange(
    _exchange: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setExchange(address)"(
    _exchange: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInflationMonitor(
    _inflationMonitor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInflationMonitor(address)"(
    _inflationMonitor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinter(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinter(address)"(
    _minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  shutdownAllAmm(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdownAllAmm()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  withdraw(
    _quoteToken: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(address,tuple)"(
    _quoteToken: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAmm(_amm: string, overrides?: CallOverrides): Promise<void>;

    "addAmm(address)"(_amm: string, overrides?: CallOverrides): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    exchange(overrides?: CallOverrides): Promise<string>;

    "exchange()"(overrides?: CallOverrides): Promise<string>;

    getAllAmms(overrides?: CallOverrides): Promise<string[]>;

    "getAllAmms()"(overrides?: CallOverrides): Promise<string[]>;

    getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getQuoteTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflationMonitor(overrides?: CallOverrides): Promise<string>;

    "inflationMonitor()"(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<boolean>;

    "isExistedAmm(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minter(overrides?: CallOverrides): Promise<string>;

    "minter()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    perpToken(overrides?: CallOverrides): Promise<string>;

    "perpToken()"(overrides?: CallOverrides): Promise<string>;

    quoteTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "quoteTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAmm(_amm: string, overrides?: CallOverrides): Promise<void>;

    "removeAmm(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "removeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setExchange(_exchange: string, overrides?: CallOverrides): Promise<void>;

    "setExchange(address)"(
      _exchange: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInflationMonitor(address)"(
      _inflationMonitor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(_minter: string, overrides?: CallOverrides): Promise<void>;

    "setMinter(address)"(
      _minter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shutdownAllAmm(overrides?: CallOverrides): Promise<void>;

    "shutdownAllAmm()"(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,tuple)"(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AmmAdded(amm: null): EventFilter;

    AmmRemoved(amm: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ShutdownAllAmms(blockNumber: null): EventFilter;

    TokenAdded(tokenAddress: null): EventFilter;

    TokenRemoved(tokenAddress: null): EventFilter;

    Withdrawn(withdrawer: null, amount: null): EventFilter;
  };

  estimateGas: {
    addAmm(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "addAmm(address)"(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchange(overrides?: CallOverrides): Promise<BigNumber>;

    "exchange()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAllAmms(overrides?: CallOverrides): Promise<BigNumber>;

    "getAllAmms()"(overrides?: CallOverrides): Promise<BigNumber>;

    getQuoteTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getQuoteTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflationMonitor(overrides?: CallOverrides): Promise<BigNumber>;

    "inflationMonitor()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    isExistedAmm(_amm: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isExistedAmm(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    "minter()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    perpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "perpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quoteTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAmm(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAmm(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setExchange(_exchange: string, overrides?: Overrides): Promise<BigNumber>;

    "setExchange(address)"(
      _exchange: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setInflationMonitor(address)"(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinter(_minter: string, overrides?: Overrides): Promise<BigNumber>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    shutdownAllAmm(overrides?: Overrides): Promise<BigNumber>;

    "shutdownAllAmm()"(overrides?: Overrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdraw(address,tuple)"(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAmm(_amm: string, overrides?: Overrides): Promise<PopulatedTransaction>;

    "addAmm(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exchange()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllAmms(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getAllAmms()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getQuoteTokenLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuoteTokenLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    inflationMonitor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inflationMonitor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isExistedAmm(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExistedAmm(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "perpToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quoteTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAmm(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAmm(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBeneficiary(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBeneficiary(address)"(
      _beneficiary: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setExchange(
      _exchange: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setExchange(address)"(
      _exchange: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInflationMonitor(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInflationMonitor(address)"(
      _inflationMonitor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinter(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinter(address)"(
      _minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    shutdownAllAmm(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdownAllAmm()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    withdraw(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,tuple)"(
      _quoteToken: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
