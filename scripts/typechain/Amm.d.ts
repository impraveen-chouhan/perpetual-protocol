/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AmmInterface extends ethers.utils.Interface {
  functions: {
    "baseAssetReserve()": FunctionFragment;
    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)": FunctionFragment;
    "calcFee(tuple)": FunctionFragment;
    "candidate()": FunctionFragment;
    "fluctuationLimitRatio()": FunctionFragment;
    "fundingBufferPeriod()": FunctionFragment;
    "fundingPeriod()": FunctionFragment;
    "fundingRate()": FunctionFragment;
    "getBaseAssetDeltaThisFundingPeriod()": FunctionFragment;
    "getCumulativeNotional()": FunctionFragment;
    "getInputPrice(uint8,tuple)": FunctionFragment;
    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)": FunctionFragment;
    "getInputTwap(uint8,tuple)": FunctionFragment;
    "getLatestLiquidityChangedSnapshots()": FunctionFragment;
    "getLiquidityChangedSnapshots(uint256)": FunctionFragment;
    "getLiquidityHistoryLength()": FunctionFragment;
    "getMaxHoldingBaseAsset()": FunctionFragment;
    "getOpenInterestNotionalCap()": FunctionFragment;
    "getOutputPrice(uint8,tuple)": FunctionFragment;
    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)": FunctionFragment;
    "getOutputTwap(uint8,tuple)": FunctionFragment;
    "getReserve()": FunctionFragment;
    "getSettlementPrice()": FunctionFragment;
    "getSnapshotLen()": FunctionFragment;
    "getSpotPrice()": FunctionFragment;
    "getTwapPrice(uint256)": FunctionFragment;
    "getUnderlyingPrice()": FunctionFragment;
    "getUnderlyingTwapPrice(uint256)": FunctionFragment;
    "globalShutdown()": FunctionFragment;
    "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)": FunctionFragment;
    "migrateLiquidity(tuple,tuple)": FunctionFragment;
    "nextFundingTime()": FunctionFragment;
    "open()": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "priceFeedKey()": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "quoteAssetReserve()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserveSnapshots(uint256)": FunctionFragment;
    "setCap(tuple,tuple)": FunctionFragment;
    "setCounterParty(address)": FunctionFragment;
    "setFluctuationLimitRatio(tuple)": FunctionFragment;
    "setGlobalShutdown(address)": FunctionFragment;
    "setOpen(bool)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setSpotPriceTwapInterval(uint256)": FunctionFragment;
    "setSpreadRatio(tuple)": FunctionFragment;
    "setTollRatio(tuple)": FunctionFragment;
    "settleFunding()": FunctionFragment;
    "shutdown()": FunctionFragment;
    "spotPriceTwapInterval()": FunctionFragment;
    "spreadRatio()": FunctionFragment;
    "swapInput(uint8,tuple,tuple)": FunctionFragment;
    "swapOutput(uint8,tuple,tuple,bool)": FunctionFragment;
    "tollAmount()": FunctionFragment;
    "tollRatio()": FunctionFragment;
    "totalPositionSize()": FunctionFragment;
    "tradeLimitRatio()": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseAssetReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcBaseAssetAfterLiquidityMigration",
    values: [{ d: BigNumberish }, { d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "calcFee",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fluctuationLimitRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingBufferPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseAssetDeltaThisFundingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCumulativeNotional",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPriceWithReserves",
    values: [
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInputTwap",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestLiquidityChangedSnapshots",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityChangedSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityHistoryLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxHoldingBaseAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenInterestNotionalCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPriceWithReserves",
    values: [
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputTwap",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSnapshotLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTwapPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingTwapPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "globalShutdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateLiquidity",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "nextFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeedKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAssetReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveSnapshots",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCap",
    values: [{ d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setCounterParty",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setFluctuationLimitRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalShutdown",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOpen", values: [boolean]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setSpotPriceTwapInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpreadRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setTollRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "settleFunding",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "shutdown", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "spotPriceTwapInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spreadRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [BigNumberish, { d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [BigNumberish, { d: BigNumberish }, { d: BigNumberish }, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "tollAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tollRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalPositionSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeLimitRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "baseAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcBaseAssetAfterLiquidityMigration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "calcFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fluctuationLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingBufferPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseAssetDeltaThisFundingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCumulativeNotional",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPriceWithReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestLiquidityChangedSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityChangedSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityHistoryLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHoldingBaseAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenInterestNotionalCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPriceWithReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSnapshotLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTwapPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingTwapPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceFeedKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveSnapshots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCounterParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFluctuationLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalShutdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOpen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSpotPriceTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpreadRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTollRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shutdown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spotPriceTwapInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tollAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tollRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "CapChanged(uint256,uint256)": EventFragment;
    "FundingRateUpdated(int256,uint256)": EventFragment;
    "LiquidityChanged(uint256,uint256,int256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReserveSnapshotted(uint256,uint256,uint256)": EventFragment;
    "Shutdown(uint256)": EventFragment;
    "SwapInput(uint8,uint256,uint256)": EventFragment;
    "SwapOutput(uint8,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingRateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveSnapshotted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Shutdown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapInput"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapOutput"): EventFragment;
}

export class Amm extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AmmInterface;

  functions: {
    baseAssetReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "baseAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    fluctuationLimitRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "fluctuationLimitRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    fundingBufferPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundingBufferPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    "fundingPeriod()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "fundingRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getLatestLiquidityChangedSnapshots(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    "getLatestLiquidityChangedSnapshots()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber }
        ] & {
          cumulativeNotional: [BigNumber] & { d: BigNumber };
          quoteAssetReserve: [BigNumber] & { d: BigNumber };
          baseAssetReserve: [BigNumber] & { d: BigNumber };
          totalPositionSize: [BigNumber] & { d: BigNumber };
        }
      ]
    >;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "getReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSnapshotLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getSnapshotLen()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSpotPrice(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSpotPrice()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnderlyingPrice(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUnderlyingPrice()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getUnderlyingTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getUnderlyingTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    globalShutdown(overrides?: CallOverrides): Promise<[string]>;

    "globalShutdown()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)"(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nextFundingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextFundingTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    open(overrides?: CallOverrides): Promise<[boolean]>;

    "open()"(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    "priceFeed()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeedKey(overrides?: CallOverrides): Promise<[string]>;

    "priceFeedKey()"(overrides?: CallOverrides): Promise<[string]>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<[string]>;

    quoteAssetReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "quoteAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    reserveSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "reserveSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    setCap(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCap(tuple,tuple)"(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCounterParty(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFluctuationLimitRatio(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFluctuationLimitRatio(tuple)"(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGlobalShutdown(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGlobalShutdown(address)"(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOpen(
      _open: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOpen(bool)"(
      _open: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSpotPriceTwapInterval(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSpotPriceTwapInterval(uint256)"(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setSpreadRatio(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setSpreadRatio(tuple)"(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTollRatio(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTollRatio(tuple)"(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

    shutdown(overrides?: Overrides): Promise<ContractTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

    spotPriceTwapInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    "spotPriceTwapInterval()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    spreadRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "spreadRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tollAmount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "tollAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    tollRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "tollRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    totalPositionSize(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "totalPositionSize()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    tradeLimitRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "tradeLimitRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  calcBaseAssetAfterLiquidityMigration(
    _baseAssetAmount: { d: BigNumberish },
    _fromQuoteReserve: { d: BigNumberish },
    _fromBaseReserve: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
    _baseAssetAmount: { d: BigNumberish },
    _fromQuoteReserve: { d: BigNumberish },
    _fromBaseReserve: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  calcFee(
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  "calcFee(tuple)"(
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "fluctuationLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingBufferPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

  "fundingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseAssetDeltaThisFundingPeriod(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getBaseAssetDeltaThisFundingPeriod()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getCumulativeNotional(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getCumulativeNotional()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputPrice(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPrice(uint8,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputPriceWithReserves(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputTwap(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputTwap(uint8,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getLatestLiquidityChangedSnapshots(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  "getLatestLiquidityChangedSnapshots()"(
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  getLiquidityChangedSnapshots(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  "getLiquidityChangedSnapshots(uint256)"(
    i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber }
    ] & {
      cumulativeNotional: [BigNumber] & { d: BigNumber };
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      totalPositionSize: [BigNumber] & { d: BigNumber };
    }
  >;

  getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getLiquidityHistoryLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMaxHoldingBaseAsset(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getMaxHoldingBaseAsset()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOpenInterestNotionalCap(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOpenInterestNotionalCap()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPrice(uint8,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPriceWithReserves(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetPoolAmount: { d: BigNumberish },
    _baseAssetPoolAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputTwap(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputTwap(uint8,tuple)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getReserve(
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  "getReserve()"(
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  getSettlementPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSettlementPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

  "getSnapshotLen()"(overrides?: CallOverrides): Promise<BigNumber>;

  getSpotPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSpotPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getTwapPrice(
    _intervalInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getTwapPrice(uint256)"(
    _intervalInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnderlyingPrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUnderlyingPrice()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getUnderlyingTwapPrice(
    _intervalInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getUnderlyingTwapPrice(uint256)"(
    _intervalInSeconds: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  globalShutdown(overrides?: CallOverrides): Promise<string>;

  "globalShutdown()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _quoteAssetReserve: BigNumberish,
    _baseAssetReserve: BigNumberish,
    _tradeLimitRatio: BigNumberish,
    _fundingPeriod: BigNumberish,
    _priceFeed: string,
    _priceFeedKey: BytesLike,
    _quoteAsset: string,
    _fluctuationLimitRatio: BigNumberish,
    _tollRatio: BigNumberish,
    _spreadRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)"(
    _quoteAssetReserve: BigNumberish,
    _baseAssetReserve: BigNumberish,
    _tradeLimitRatio: BigNumberish,
    _fundingPeriod: BigNumberish,
    _priceFeed: string,
    _priceFeedKey: BytesLike,
    _quoteAsset: string,
    _fluctuationLimitRatio: BigNumberish,
    _tollRatio: BigNumberish,
    _spreadRatio: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  migrateLiquidity(
    _liquidityMultiplier: { d: BigNumberish },
    _fluctuationLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrateLiquidity(tuple,tuple)"(
    _liquidityMultiplier: { d: BigNumberish },
    _fluctuationLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

  "nextFundingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  open(overrides?: CallOverrides): Promise<boolean>;

  "open()"(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  "priceFeed()"(overrides?: CallOverrides): Promise<string>;

  priceFeedKey(overrides?: CallOverrides): Promise<string>;

  "priceFeedKey()"(overrides?: CallOverrides): Promise<string>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

  quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  reserveSnapshots(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "reserveSnapshots(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      quoteAssetReserve: [BigNumber] & { d: BigNumber };
      baseAssetReserve: [BigNumber] & { d: BigNumber };
      timestamp: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  setCap(
    _maxHoldingBaseAsset: { d: BigNumberish },
    _openInterestNotionalCap: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCap(tuple,tuple)"(
    _maxHoldingBaseAsset: { d: BigNumberish },
    _openInterestNotionalCap: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCounterParty(
    _counterParty: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCounterParty(address)"(
    _counterParty: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFluctuationLimitRatio(
    _fluctuationLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFluctuationLimitRatio(tuple)"(
    _fluctuationLimitRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGlobalShutdown(
    _globalShutdown: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGlobalShutdown(address)"(
    _globalShutdown: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOpen(_open: boolean, overrides?: Overrides): Promise<ContractTransaction>;

  "setOpen(bool)"(
    _open: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSpotPriceTwapInterval(
    _interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSpotPriceTwapInterval(uint256)"(
    _interval: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setSpreadRatio(
    _spreadRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setSpreadRatio(tuple)"(
    _spreadRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTollRatio(
    _tollRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTollRatio(tuple)"(
    _tollRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

  "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

  shutdown(overrides?: Overrides): Promise<ContractTransaction>;

  "shutdown()"(overrides?: Overrides): Promise<ContractTransaction>;

  spotPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

  "spotPriceTwapInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

  spreadRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "spreadRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapInput(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapInput(uint8,tuple,tuple)"(
    _dir: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOutput(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetAmountLimit: { d: BigNumberish },
    _skipFluctuationCheck: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOutput(uint8,tuple,tuple,bool)"(
    _dir: BigNumberish,
    _baseAssetAmount: { d: BigNumberish },
    _quoteAssetAmountLimit: { d: BigNumberish },
    _skipFluctuationCheck: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tollAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "tollAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  tollRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "tollRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

  "totalPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "tradeLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "fluctuationLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingBufferPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getLatestLiquidityChangedSnapshots(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    "getLatestLiquidityChangedSnapshots()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber }
      ] & {
        cumulativeNotional: [BigNumber] & { d: BigNumber };
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        totalPositionSize: [BigNumber] & { d: BigNumber };
      }
    >;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "getReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

    "getSnapshotLen()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSpotPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnderlyingPrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUnderlyingPrice()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getUnderlyingTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getUnderlyingTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    globalShutdown(overrides?: CallOverrides): Promise<string>;

    "globalShutdown()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)"(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextFundingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<boolean>;

    "open()"(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    "priceFeed()"(overrides?: CallOverrides): Promise<string>;

    priceFeedKey(overrides?: CallOverrides): Promise<string>;

    "priceFeedKey()"(overrides?: CallOverrides): Promise<string>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    reserveSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "reserveSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        quoteAssetReserve: [BigNumber] & { d: BigNumber };
        baseAssetReserve: [BigNumber] & { d: BigNumber };
        timestamp: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    setCap(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setCap(tuple,tuple)"(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setCounterParty(
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFluctuationLimitRatio(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setFluctuationLimitRatio(tuple)"(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalShutdown(
      _globalShutdown: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGlobalShutdown(address)"(
      _globalShutdown: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpen(_open: boolean, overrides?: CallOverrides): Promise<void>;

    "setOpen(bool)"(_open: boolean, overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpotPriceTwapInterval(
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSpotPriceTwapInterval(uint256)"(
      _interval: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSpreadRatio(
      _spreadRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setSpreadRatio(tuple)"(
      _spreadRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setTollRatio(
      _tollRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setTollRatio(tuple)"(
      _tollRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    settleFunding(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "settleFunding()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    shutdown(overrides?: CallOverrides): Promise<void>;

    "shutdown()"(overrides?: CallOverrides): Promise<void>;

    spotPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "spotPriceTwapInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    spreadRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "spreadRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    tollAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "tollAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tollRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "tollRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    CapChanged(
      maxHoldingBaseAsset: null,
      openInterestNotionalCap: null
    ): EventFilter;

    FundingRateUpdated(rate: null, underlyingPrice: null): EventFilter;

    LiquidityChanged(
      quoteReserve: null,
      baseReserve: null,
      cumulativeNotional: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    ReserveSnapshotted(
      quoteAssetReserve: null,
      baseAssetReserve: null,
      timestamp: null
    ): EventFilter;

    Shutdown(settlementPrice: null): EventFilter;

    SwapInput(
      dir: null,
      quoteAssetAmount: null,
      baseAssetAmount: null
    ): EventFilter;

    SwapOutput(
      dir: null,
      quoteAssetAmount: null,
      baseAssetAmount: null
    ): EventFilter;
  };

  estimateGas: {
    baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    fluctuationLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "fluctuationLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingBufferPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingBufferPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingPeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCumulativeNotional(overrides?: CallOverrides): Promise<BigNumber>;

    "getCumulativeNotional()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLatestLiquidityChangedSnapshots(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLatestLiquidityChangedSnapshots()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityHistoryLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMaxHoldingBaseAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "getMaxHoldingBaseAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOpenInterestNotionalCap(overrides?: CallOverrides): Promise<BigNumber>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSettlementPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getSettlementPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSnapshotLen(overrides?: CallOverrides): Promise<BigNumber>;

    "getSnapshotLen()"(overrides?: CallOverrides): Promise<BigNumber>;

    getSpotPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getSpotPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnderlyingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getUnderlyingPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnderlyingTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnderlyingTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalShutdown(overrides?: CallOverrides): Promise<BigNumber>;

    "globalShutdown()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)"(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    nextFundingTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextFundingTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    open(overrides?: CallOverrides): Promise<BigNumber>;

    "open()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeedKey(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeedKey()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    reserveSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "reserveSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setCap(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCap(tuple,tuple)"(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCounterParty(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFluctuationLimitRatio(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFluctuationLimitRatio(tuple)"(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGlobalShutdown(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGlobalShutdown(address)"(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOpen(_open: boolean, overrides?: Overrides): Promise<BigNumber>;

    "setOpen(bool)"(_open: boolean, overrides?: Overrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSpotPriceTwapInterval(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSpotPriceTwapInterval(uint256)"(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setSpreadRatio(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setSpreadRatio(tuple)"(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTollRatio(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTollRatio(tuple)"(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    settleFunding(overrides?: Overrides): Promise<BigNumber>;

    "settleFunding()"(overrides?: Overrides): Promise<BigNumber>;

    shutdown(overrides?: Overrides): Promise<BigNumber>;

    "shutdown()"(overrides?: Overrides): Promise<BigNumber>;

    spotPriceTwapInterval(overrides?: CallOverrides): Promise<BigNumber>;

    "spotPriceTwapInterval()"(overrides?: CallOverrides): Promise<BigNumber>;

    spreadRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "spreadRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tollAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "tollAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    tollRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "tollRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalPositionSize(overrides?: CallOverrides): Promise<BigNumber>;

    "totalPositionSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeLimitRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcBaseAssetAfterLiquidityMigration(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcBaseAssetAfterLiquidityMigration(tuple,tuple,tuple)"(
      _baseAssetAmount: { d: BigNumberish },
      _fromQuoteReserve: { d: BigNumberish },
      _fromBaseReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcFee(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcFee(tuple)"(
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fluctuationLimitRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fluctuationLimitRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingBufferPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fundingBufferPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingPeriod()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseAssetDeltaThisFundingPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBaseAssetDeltaThisFundingPeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCumulativeNotional(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCumulativeNotional()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputPrice(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputPriceWithReserves(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInputTwap(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLatestLiquidityChangedSnapshots(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLatestLiquidityChangedSnapshots()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityChangedSnapshots(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityChangedSnapshots(uint256)"(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityHistoryLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityHistoryLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMaxHoldingBaseAsset(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMaxHoldingBaseAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOpenInterestNotionalCap(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOpenInterestNotionalCap()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPrice(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPriceWithReserves(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPriceWithReserves(uint8,tuple,tuple,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetPoolAmount: { d: BigNumberish },
      _baseAssetPoolAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputTwap(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputTwap(uint8,tuple)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSettlementPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSettlementPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSnapshotLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSnapshotLen()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getSpotPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingPrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnderlyingPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnderlyingTwapPrice(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnderlyingTwapPrice(uint256)"(
      _intervalInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalShutdown(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalShutdown()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256,uint256,address,bytes32,address,uint256,uint256,uint256)"(
      _quoteAssetReserve: BigNumberish,
      _baseAssetReserve: BigNumberish,
      _tradeLimitRatio: BigNumberish,
      _fundingPeriod: BigNumberish,
      _priceFeed: string,
      _priceFeedKey: BytesLike,
      _quoteAsset: string,
      _fluctuationLimitRatio: BigNumberish,
      _tollRatio: BigNumberish,
      _spreadRatio: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    migrateLiquidity(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrateLiquidity(tuple,tuple)"(
      _liquidityMultiplier: { d: BigNumberish },
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nextFundingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextFundingTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    open(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "open()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeedKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFeedKey()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    reserveSnapshots(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "reserveSnapshots(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCap(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCap(tuple,tuple)"(
      _maxHoldingBaseAsset: { d: BigNumberish },
      _openInterestNotionalCap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCounterParty(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCounterParty(address)"(
      _counterParty: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFluctuationLimitRatio(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFluctuationLimitRatio(tuple)"(
      _fluctuationLimitRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGlobalShutdown(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGlobalShutdown(address)"(
      _globalShutdown: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOpen(
      _open: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOpen(bool)"(
      _open: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSpotPriceTwapInterval(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSpotPriceTwapInterval(uint256)"(
      _interval: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setSpreadRatio(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setSpreadRatio(tuple)"(
      _spreadRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTollRatio(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTollRatio(tuple)"(
      _tollRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settleFunding(overrides?: Overrides): Promise<PopulatedTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    shutdown(overrides?: Overrides): Promise<PopulatedTransaction>;

    "shutdown()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    spotPriceTwapInterval(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "spotPriceTwapInterval()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    spreadRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "spreadRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapInput(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      _dir: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOutput(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOutput(uint8,tuple,tuple,bool)"(
      _dir: BigNumberish,
      _baseAssetAmount: { d: BigNumberish },
      _quoteAssetAmountLimit: { d: BigNumberish },
      _skipFluctuationCheck: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tollAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tollAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tollRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tollRatio()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalPositionSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalPositionSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tradeLimitRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tradeLimitRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
