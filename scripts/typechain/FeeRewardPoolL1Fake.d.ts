/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeRewardPoolL1FakeInterface extends ethers.utils.Interface {
  functions: {
    "DURATION()": FunctionFragment;
    "candidate()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "feeTokenPoolDispatcher()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "lastTimeRewardApplicable()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "mock_getCurrentBlockNumber()": FunctionFragment;
    "mock_getCurrentTimestamp()": FunctionFragment;
    "mock_setBlockNumber(uint256)": FunctionFragment;
    "mock_setBlockTimestamp(uint256)": FunctionFragment;
    "mock_setStakedPerpTokenAddr(address)": FunctionFragment;
    "notifyRewardAmount(tuple)": FunctionFragment;
    "notifyStakeChanged(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerToken()": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "stakedPerpToken()": FunctionFragment;
    "stakedPerpTokenAddr()": FunctionFragment;
    "token()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "userRewardPerTokenPaid(address)": FunctionFragment;
    "withdrawReward()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "DURATION", values?: undefined): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeTokenPoolDispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastTimeRewardApplicable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setStakedPerpTokenAddr",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "notifyStakeChanged",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stakedPerpToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakedPerpTokenAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerTokenPaid",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "DURATION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenPoolDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastTimeRewardApplicable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setStakedPerpTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "notifyStakeChanged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakedPerpToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakedPerpTokenAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerTokenPaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RewardTransferred(uint256)": EventFragment;
    "RewardWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardWithdrawn"): EventFragment;
}

export class FeeRewardPoolL1Fake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeRewardPoolL1FakeInterface;

  functions: {
    DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    "DURATION()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    earned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "earned(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    feeTokenPoolDispatcher(overrides?: CallOverrides): Promise<[string]>;

    "feeTokenPoolDispatcher()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastTimeRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setStakedPerpTokenAddr(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setStakedPerpTokenAddr(address)"(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    notifyRewardAmount(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyRewardAmount(tuple)"(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    notifyStakeChanged(
      _staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "notifyStakeChanged(address)"(
      _staker: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    "periodFinish()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rewardPerToken(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    rewardRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewardRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakedPerpToken(overrides?: CallOverrides): Promise<[string]>;

    "stakedPerpToken()"(overrides?: CallOverrides): Promise<[string]>;

    stakedPerpTokenAddr(overrides?: CallOverrides): Promise<[string]>;

    "stakedPerpTokenAddr()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    withdrawReward(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawReward()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  "DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  earned(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "earned(address)"(
    _staker: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  feeTokenPoolDispatcher(overrides?: CallOverrides): Promise<string>;

  "feeTokenPoolDispatcher()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: string,
    _stakedPerpToken: string,
    _feeTokenPoolDispatcher: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _token: string,
    _stakedPerpToken: string,
    _feeTokenPoolDispatcher: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

  "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentBlockNumber()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_setBlockNumber(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockNumber(uint256)"(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setBlockTimestamp(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setStakedPerpTokenAddr(
    _stakedPerpTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setStakedPerpTokenAddr(address)"(
    _stakedPerpTokenAddr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  notifyRewardAmount(
    _reward: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyRewardAmount(tuple)"(
    _reward: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  notifyStakeChanged(
    _staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "notifyStakeChanged(address)"(
    _staker: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rewardPerToken(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "rewardPerToken()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakedPerpToken(overrides?: CallOverrides): Promise<string>;

  "stakedPerpToken()"(overrides?: CallOverrides): Promise<string>;

  stakedPerpTokenAddr(overrides?: CallOverrides): Promise<string>;

  "stakedPerpTokenAddr()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  userRewardPerTokenPaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userRewardPerTokenPaid(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawReward(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    earned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "earned(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    feeTokenPoolDispatcher(overrides?: CallOverrides): Promise<string>;

    "feeTokenPoolDispatcher()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setStakedPerpTokenAddr(
      _stakedPerpTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setStakedPerpTokenAddr(address)"(
      _stakedPerpTokenAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    notifyRewardAmount(
      _reward: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyRewardAmount(tuple)"(
      _reward: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    notifyStakeChanged(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "notifyStakeChanged(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rewardPerToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stakedPerpToken(overrides?: CallOverrides): Promise<string>;

    "stakedPerpToken()"(overrides?: CallOverrides): Promise<string>;

    stakedPerpTokenAddr(overrides?: CallOverrides): Promise<string>;

    "stakedPerpTokenAddr()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawReward(overrides?: CallOverrides): Promise<void>;

    "withdrawReward()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RewardTransferred(amount: null): EventFilter;

    RewardWithdrawn(staker: string | null, amount: null): EventFilter;
  };

  estimateGas: {
    DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    "DURATION()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTokenPoolDispatcher(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTokenPoolDispatcher()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastTimeRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>;

    "lastTimeRewardApplicable()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_getCurrentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setStakedPerpTokenAddr(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setStakedPerpTokenAddr(address)"(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    notifyRewardAmount(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyRewardAmount(tuple)"(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    notifyStakeChanged(
      _staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "notifyStakeChanged(address)"(
      _staker: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    "periodFinish()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakedPerpToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakedPerpToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    stakedPerpTokenAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "stakedPerpTokenAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawReward(overrides?: Overrides): Promise<BigNumber>;

    "withdrawReward()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DURATION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DURATION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      _staker: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTokenPoolDispatcher(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeTokenPoolDispatcher()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _token: string,
      _stakedPerpToken: string,
      _feeTokenPoolDispatcher: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastTimeRewardApplicable(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastTimeRewardApplicable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentBlockNumber()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setStakedPerpTokenAddr(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setStakedPerpTokenAddr(address)"(
      _stakedPerpTokenAddr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyRewardAmount(tuple)"(
      _reward: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    notifyStakeChanged(
      _staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "notifyStakeChanged(address)"(
      _staker: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "periodFinish()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardPerToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakedPerpToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakedPerpToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stakedPerpTokenAddr(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakedPerpTokenAddr()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    userRewardPerTokenPaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRewardPerTokenPaid(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
