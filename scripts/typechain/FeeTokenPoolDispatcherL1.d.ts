/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FeeTokenPoolDispatcherL1Interface extends ethers.utils.Interface {
  functions: {
    "TOKEN_AMOUNT_LIMIT()": FunctionFragment;
    "addFeeRewardPool(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "feeRewardPoolMap(address)": FunctionFragment;
    "feeTokens(uint256)": FunctionFragment;
    "getFeeTokenLength()": FunctionFragment;
    "initialize()": FunctionFragment;
    "isFeeTokenExisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFeeRewardPool(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "transferToFeeRewardPool()": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeRewardPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRewardPoolMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeTokenExisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFeeRewardPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferToFeeRewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRewardPoolMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeeTokenExisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToFeeRewardPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "FeeRewardPoolAdded(address,address)": EventFragment;
    "FeeRewardPoolRemoved(address,address)": EventFragment;
    "FeeTransferred(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeRewardPoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRewardPoolRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class FeeTokenPoolDispatcherL1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FeeTokenPoolDispatcherL1Interface;

  functions: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    feeRewardPoolMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "feeRewardPoolMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferToFeeRewardPool(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToFeeRewardPool()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addFeeRewardPool(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFeeRewardPool(address)"(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  feeRewardPoolMap(arg0: string, overrides?: CallOverrides): Promise<string>;

  "feeRewardPoolMap(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "feeTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  isFeeTokenExisted(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFeeTokenExisted(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFeeRewardPool(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFeeRewardPool(address)"(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferToFeeRewardPool(overrides?: Overrides): Promise<ContractTransaction>;

  "transferToFeeRewardPool()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeRewardPool(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addFeeRewardPool(address)"(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    feeRewardPoolMap(arg0: string, overrides?: CallOverrides): Promise<string>;

    "feeRewardPoolMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFeeRewardPool(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFeeRewardPool(address)"(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToFeeRewardPool(overrides?: CallOverrides): Promise<void>;

    "transferToFeeRewardPool()"(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    FeeRewardPoolAdded(token: null, feeRewardPool: null): EventFilter;

    FeeRewardPoolRemoved(token: null, feeRewardPool: null): EventFilter;

    FeeTransferred(token: null, feeRewardPool: null, amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeRewardPoolMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeRewardPoolMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferToFeeRewardPool(overrides?: Overrides): Promise<BigNumber>;

    "transferToFeeRewardPool()"(overrides?: Overrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_AMOUNT_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_AMOUNT_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRewardPoolMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeRewardPoolMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeTokenLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeeRewardPool(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFeeRewardPool(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferToFeeRewardPool(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToFeeRewardPool()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
