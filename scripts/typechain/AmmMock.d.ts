/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AmmMockInterface extends ethers.utils.Interface {
  functions: {
    "baseAssetReserve()": FunctionFragment;
    "fundingRate()": FunctionFragment;
    "getInputPrice(uint8,tuple)": FunctionFragment;
    "getOutputPrice(uint8,tuple)": FunctionFragment;
    "getOutputTwap(uint8,tuple)": FunctionFragment;
    "getReserve()": FunctionFragment;
    "mockSetBaseAssetReserve(tuple)": FunctionFragment;
    "mockSetFundingRate(tuple)": FunctionFragment;
    "mockSetInputPrice(tuple)": FunctionFragment;
    "mockSetOutputPrice(tuple)": FunctionFragment;
    "mockSetOutputTwap(tuple)": FunctionFragment;
    "mockSetQuoteAsset(address)": FunctionFragment;
    "mockSetQuoteAssetReserve(tuple)": FunctionFragment;
    "quoteAsset()": FunctionFragment;
    "quoteAssetReserve()": FunctionFragment;
    "settleFunding()": FunctionFragment;
    "swapInput(uint8,tuple,tuple)": FunctionFragment;
    "swapOutput(uint8,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "baseAssetReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputTwap",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetBaseAssetReserve",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetFundingRate",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetInputPrice",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetOutputPrice",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetOutputTwap",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetQuoteAsset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetQuoteAssetReserve",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteAssetReserve",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "settleFunding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [BigNumberish, { d: BigNumberish }, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [BigNumberish, { d: BigNumberish }]
  ): string;

  decodeFunctionResult(
    functionFragment: "baseAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mockSetBaseAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetFundingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetOutputTwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetQuoteAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteAssetReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleFunding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;

  events: {
    "Dir(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dir"): EventFragment;
}

export class AmmMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AmmMockInterface;

  functions: {
    baseAssetReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "baseAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "fundingRate()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getInputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputTwap(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputTwap(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "getReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    mockSetBaseAssetReserve(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetBaseAssetReserve(tuple)"(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetFundingRate(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetFundingRate(tuple)"(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetInputPrice(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetInputPrice(tuple)"(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetOutputPrice(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetOutputPrice(tuple)"(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetOutputTwap(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetOutputTwap(tuple)"(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetQuoteAsset(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetQuoteAsset(address)"(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetQuoteAssetReserve(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetQuoteAssetReserve(tuple)"(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<[string]>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<[string]>;

    quoteAssetReserve(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "quoteAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

    swapInput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOutput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOutput(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  fundingRate(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "fundingRate()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getInputPrice(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPrice(uint8,tuple)"(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPrice(uint8,tuple)"(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputTwap(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputTwap(uint8,tuple)"(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getReserve(
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  "getReserve()"(
    overrides?: CallOverrides
  ): Promise<[[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]>;

  mockSetBaseAssetReserve(
    _baseAssetReserve: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetBaseAssetReserve(tuple)"(
    _baseAssetReserve: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetFundingRate(
    _fr: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetFundingRate(tuple)"(
    _fr: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetInputPrice(
    _inputPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetInputPrice(tuple)"(
    _inputPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetOutputPrice(
    _outputPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetOutputPrice(tuple)"(
    _outputPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetOutputTwap(
    _outputTwap: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetOutputTwap(tuple)"(
    _outputTwap: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetQuoteAsset(
    _quoteAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetQuoteAsset(address)"(
    _quoteAsset: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetQuoteAssetReserve(
    _quoteAssetReserve: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetQuoteAssetReserve(tuple)"(
    _quoteAssetReserve: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  quoteAsset(overrides?: CallOverrides): Promise<string>;

  "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

  quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

  "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

  settleFunding(overrides?: Overrides): Promise<ContractTransaction>;

  "settleFunding()"(overrides?: Overrides): Promise<ContractTransaction>;

  swapInput(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    arg2: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapInput(uint8,tuple,tuple)"(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    arg2: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOutput(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOutput(uint8,tuple)"(
    arg0: BigNumberish,
    arg1: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "fundingRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getInputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputTwap(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputTwap(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getReserve(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    "getReserve()"(
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }]
    >;

    mockSetBaseAssetReserve(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetBaseAssetReserve(tuple)"(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetFundingRate(
      _fr: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetFundingRate(tuple)"(
      _fr: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetInputPrice(
      _inputPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetInputPrice(tuple)"(
      _inputPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetOutputPrice(
      _outputPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetOutputPrice(tuple)"(
      _outputPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetOutputTwap(
      _outputTwap: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetOutputTwap(tuple)"(
      _outputTwap: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetQuoteAsset(
      _quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetQuoteAsset(address)"(
      _quoteAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetQuoteAssetReserve(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetQuoteAssetReserve(tuple)"(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    quoteAsset(overrides?: CallOverrides): Promise<string>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<string>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    settleFunding(overrides?: CallOverrides): Promise<void>;

    "settleFunding()"(overrides?: CallOverrides): Promise<void>;

    swapInput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapInput(uint8,tuple,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapOutput(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;
  };

  filters: {
    Dir(dir: null): EventFilter;
  };

  estimateGas: {
    baseAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "baseAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    fundingRate(overrides?: CallOverrides): Promise<BigNumber>;

    "fundingRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputTwap(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputTwap(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSetBaseAssetReserve(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetBaseAssetReserve(tuple)"(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetFundingRate(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetFundingRate(tuple)"(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetInputPrice(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetInputPrice(tuple)"(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetOutputPrice(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetOutputPrice(tuple)"(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetOutputTwap(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetOutputTwap(tuple)"(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetQuoteAsset(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetQuoteAsset(address)"(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetQuoteAssetReserve(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetQuoteAssetReserve(tuple)"(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    quoteAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<BigNumber>;

    "quoteAssetReserve()"(overrides?: CallOverrides): Promise<BigNumber>;

    settleFunding(overrides?: Overrides): Promise<BigNumber>;

    "settleFunding()"(overrides?: Overrides): Promise<BigNumber>;

    swapInput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapInput(uint8,tuple,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOutput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOutput(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    baseAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fundingRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fundingRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPrice(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputTwap(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputTwap(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserve()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSetBaseAssetReserve(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetBaseAssetReserve(tuple)"(
      _baseAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetFundingRate(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetFundingRate(tuple)"(
      _fr: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetInputPrice(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetInputPrice(tuple)"(
      _inputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetOutputPrice(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetOutputPrice(tuple)"(
      _outputPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetOutputTwap(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetOutputTwap(tuple)"(
      _outputTwap: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetQuoteAsset(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetQuoteAsset(address)"(
      _quoteAsset: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetQuoteAssetReserve(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetQuoteAssetReserve(tuple)"(
      _quoteAssetReserve: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    quoteAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteAssetReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "quoteAssetReserve()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settleFunding(overrides?: Overrides): Promise<PopulatedTransaction>;

    "settleFunding()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    swapInput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapInput(uint8,tuple,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      arg2: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOutput(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOutput(uint8,tuple)"(
      arg0: BigNumberish,
      arg1: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
