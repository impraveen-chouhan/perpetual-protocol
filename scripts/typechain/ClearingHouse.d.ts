/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClearingHouseInterface extends ethers.utils.Interface {
  functions: {
    "addMargin(address,tuple)": FunctionFragment;
    "adjustPosition(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "closePosition(address,tuple)": FunctionFragment;
    "feePool()": FunctionFragment;
    "getLatestCumulativePremiumFraction(address)": FunctionFragment;
    "getMarginRatio(address,address)": FunctionFragment;
    "getPosition(address,address)": FunctionFragment;
    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)": FunctionFragment;
    "getUnadjustedPosition(address,address)": FunctionFragment;
    "initMarginRatio()": FunctionFragment;
    "initialize(uint256,uint256,uint256,address,address)": FunctionFragment;
    "insuranceFund()": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "liquidate(address,address)": FunctionFragment;
    "liquidationFeeRatio()": FunctionFragment;
    "maintenanceMarginRatio()": FunctionFragment;
    "openInterestNotionalMap(address)": FunctionFragment;
    "openPosition(address,uint8,tuple,tuple,tuple)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "payFunding(address)": FunctionFragment;
    "removeMargin(address,tuple)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeePool(address)": FunctionFragment;
    "setLiquidationFeeRatio(tuple)": FunctionFragment;
    "setMaintenanceMarginRatio(tuple)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setWhitelist(address)": FunctionFragment;
    "settlePosition(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMargin",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "adjustPosition",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "feePool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getLatestCumulativePremiumFraction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarginRatio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionNotionalAndUnrealizedPnl",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnadjustedPosition",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "insuranceFund",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationFeeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maintenanceMarginRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openInterestNotionalMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [
      string,
      BigNumberish,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "payFunding", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeMargin",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFeePool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFeeRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaintenanceMarginRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addMargin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "adjustPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLatestCumulativePremiumFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionNotionalAndUnrealizedPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnadjustedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "insuranceFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maintenanceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openInterestNotionalMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFunding", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeePool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFeeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaintenanceMarginRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "LiquidationFeeRatioChanged(uint256)": EventFragment;
    "MarginChanged(address,address,int256,int256)": EventFragment;
    "MarginRatioChanged(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PositionAdjusted(address,address,int256,uint256,uint256)": EventFragment;
    "PositionChanged(address,address,uint256,uint256,int256,uint256,int256,int256,int256,uint256,uint256,uint256,int256)": EventFragment;
    "PositionLiquidated(address,address,uint256,uint256,uint256,address,uint256)": EventFragment;
    "PositionSettled(address,address,uint256)": EventFragment;
    "RestrictionModeEntered(address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidationFeeRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarginRatioChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionAdjusted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RestrictionModeEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class ClearingHouse extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClearingHouseInterface;

  functions: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addMargin(address,tuple)"(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    adjustPosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "adjustPosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "closePosition(address,tuple)"(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feePool(overrides?: CallOverrides): Promise<[string]>;

    "feePool()"(overrides?: CallOverrides): Promise<[string]>;

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getLatestCumulativePremiumFraction(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;

    "getPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ]
    >;

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber };
        unrealizedPnl: [BigNumber] & { d: BigNumber };
      }
    >;

    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber };
        unrealizedPnl: [BigNumber] & { d: BigNumber };
      }
    >;

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        };
      }
    >;

    "getUnadjustedPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        }
      ] & {
        position: [
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          [BigNumber] & { d: BigNumber },
          BigNumber,
          BigNumber
        ] & {
          size: [BigNumber] & { d: BigNumber };
          margin: [BigNumber] & { d: BigNumber };
          openNotional: [BigNumber] & { d: BigNumber };
          lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
          liquidityHistoryIndex: BigNumber;
          blockNumber: BigNumber;
        };
      }
    >;

    initMarginRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "initMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256,address,address)"(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<[string]>;

    "insuranceFund()"(overrides?: CallOverrides): Promise<[string]>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    liquidationFeeRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "liquidationFeeRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    maintenanceMarginRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "maintenanceMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    openInterestNotionalMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "openInterestNotionalMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    payFunding(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "payFunding(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMargin(address,tuple)"(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeePool(
      _feePool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeePool(address)"(
      _feePool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLiquidationFeeRatio(tuple)"(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMaintenanceMarginRatio(tuple)"(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    settlePosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settlePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addMargin(
    _amm: string,
    _addedMargin: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addMargin(address,tuple)"(
    _amm: string,
    _addedMargin: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  adjustPosition(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "adjustPosition(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  closePosition(
    _amm: string,
    _quoteAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "closePosition(address,tuple)"(
    _amm: string,
    _quoteAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feePool(overrides?: CallOverrides): Promise<string>;

  "feePool()"(overrides?: CallOverrides): Promise<string>;

  getLatestCumulativePremiumFraction(
    _amm: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getLatestCumulativePremiumFraction(address)"(
    _amm: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getMarginRatio(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getMarginRatio(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getPosition(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "getPosition(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  getPositionNotionalAndUnrealizedPnl(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
      positionNotional: [BigNumber] & { d: BigNumber };
      unrealizedPnl: [BigNumber] & { d: BigNumber };
    }
  >;

  "getPositionNotionalAndUnrealizedPnl(address,address,uint8)"(
    _amm: string,
    _trader: string,
    _pnlCalcOption: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
      positionNotional: [BigNumber] & { d: BigNumber };
      unrealizedPnl: [BigNumber] & { d: BigNumber };
    }
  >;

  getUnadjustedPosition(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  "getUnadjustedPosition(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: CallOverrides
  ): Promise<
    [
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      [BigNumber] & { d: BigNumber },
      BigNumber,
      BigNumber
    ] & {
      size: [BigNumber] & { d: BigNumber };
      margin: [BigNumber] & { d: BigNumber };
      openNotional: [BigNumber] & { d: BigNumber };
      lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
      liquidityHistoryIndex: BigNumber;
      blockNumber: BigNumber;
    }
  >;

  initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "initMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _initMarginRatio: BigNumberish,
    _maintenanceMarginRatio: BigNumberish,
    _liquidationFeeRatio: BigNumberish,
    _insuranceFund: string,
    _trustedForwarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256,address,address)"(
    _initMarginRatio: BigNumberish,
    _maintenanceMarginRatio: BigNumberish,
    _liquidationFeeRatio: BigNumberish,
    _insuranceFund: string,
    _trustedForwarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  insuranceFund(overrides?: CallOverrides): Promise<string>;

  "insuranceFund()"(overrides?: CallOverrides): Promise<string>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidate(
    _amm: string,
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "liquidate(address,address)"(
    _amm: string,
    _trader: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationFeeRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

  "maintenanceMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

  openInterestNotionalMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "openInterestNotionalMap(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  openPosition(
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "openPosition(address,uint8,tuple,tuple,tuple)"(
    _amm: string,
    _side: BigNumberish,
    _quoteAssetAmount: { d: BigNumberish },
    _leverage: { d: BigNumberish },
    _baseAssetAmountLimit: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  payFunding(_amm: string, overrides?: Overrides): Promise<ContractTransaction>;

  "payFunding(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMargin(
    _amm: string,
    _removedMargin: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMargin(address,tuple)"(
    _amm: string,
    _removedMargin: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeePool(
    _feePool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeePool(address)"(
    _feePool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLiquidationFeeRatio(
    _liquidationFeeRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLiquidationFeeRatio(tuple)"(
    _liquidationFeeRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMaintenanceMarginRatio(
    _maintenanceMarginRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMaintenanceMarginRatio(tuple)"(
    _maintenanceMarginRatio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWhitelist(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWhitelist(address)"(
    _whitelist: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  settlePosition(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "settlePosition(address)"(
    _amm: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  "versionRecipient()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "addMargin(address,tuple)"(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    adjustPosition(_amm: string, overrides?: CallOverrides): Promise<void>;

    "adjustPosition(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "closePosition(address,tuple)"(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    feePool(overrides?: CallOverrides): Promise<string>;

    "feePool()"(overrides?: CallOverrides): Promise<string>;

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getLatestCumulativePremiumFraction(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "getPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber };
        unrealizedPnl: [BigNumber] & { d: BigNumber };
      }
    >;

    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[BigNumber] & { d: BigNumber }, [BigNumber] & { d: BigNumber }] & {
        positionNotional: [BigNumber] & { d: BigNumber };
        unrealizedPnl: [BigNumber] & { d: BigNumber };
      }
    >;

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    "getUnadjustedPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        [BigNumber] & { d: BigNumber },
        BigNumber,
        BigNumber
      ] & {
        size: [BigNumber] & { d: BigNumber };
        margin: [BigNumber] & { d: BigNumber };
        openNotional: [BigNumber] & { d: BigNumber };
        lastUpdatedCumulativePremiumFraction: [BigNumber] & { d: BigNumber };
        liquidityHistoryIndex: BigNumber;
        blockNumber: BigNumber;
      }
    >;

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "initMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256,address,address)"(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    insuranceFund(overrides?: CallOverrides): Promise<string>;

    "insuranceFund()"(overrides?: CallOverrides): Promise<string>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationFeeRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "maintenanceMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestNotionalMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openInterestNotionalMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    payFunding(_amm: string, overrides?: CallOverrides): Promise<void>;

    "payFunding(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "removeMargin(address,tuple)"(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeePool(_feePool: string, overrides?: CallOverrides): Promise<void>;

    "setFeePool(address)"(
      _feePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiquidationFeeRatio(tuple)"(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setMaintenanceMarginRatio(tuple)"(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhitelist(_whitelist: string, overrides?: CallOverrides): Promise<void>;

    "setWhitelist(address)"(
      _whitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settlePosition(_amm: string, overrides?: CallOverrides): Promise<void>;

    "settlePosition(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LiquidationFeeRatioChanged(liquidationFeeRatio: null): EventFilter;

    MarginChanged(
      sender: string | null,
      amm: string | null,
      amount: null,
      fundingPayment: null
    ): EventFilter;

    MarginRatioChanged(marginRatio: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    PositionAdjusted(
      amm: string | null,
      trader: string | null,
      newPositionSize: null,
      oldLiquidityIndex: null,
      newLiquidityIndex: null
    ): EventFilter;

    PositionChanged(
      trader: string | null,
      amm: string | null,
      margin: null,
      positionNotional: null,
      exchangedPositionSize: null,
      fee: null,
      positionSizeAfter: null,
      realizedPnl: null,
      unrealizedPnlAfter: null,
      badDebt: null,
      liquidationPenalty: null,
      spotPrice: null,
      fundingPayment: null
    ): EventFilter;

    PositionLiquidated(
      trader: string | null,
      amm: string | null,
      positionNotional: null,
      positionSize: null,
      liquidationFee: null,
      liquidator: null,
      badDebt: null
    ): EventFilter;

    PositionSettled(
      amm: string | null,
      trader: string | null,
      valueTransferred: null
    ): EventFilter;

    RestrictionModeEntered(amm: null, blockNumber: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addMargin(address,tuple)"(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    adjustPosition(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "adjustPosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "closePosition(address,tuple)"(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    feePool(overrides?: CallOverrides): Promise<BigNumber>;

    "feePool()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLatestCumulativePremiumFraction(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnadjustedPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "initMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256,address,address)"(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    insuranceFund(overrides?: CallOverrides): Promise<BigNumber>;

    "insuranceFund()"(overrides?: CallOverrides): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    liquidationFeeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationFeeRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    maintenanceMarginRatio(overrides?: CallOverrides): Promise<BigNumber>;

    "maintenanceMarginRatio()"(overrides?: CallOverrides): Promise<BigNumber>;

    openInterestNotionalMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "openInterestNotionalMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    payFunding(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "payFunding(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeMargin(address,tuple)"(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeePool(_feePool: string, overrides?: Overrides): Promise<BigNumber>;

    "setFeePool(address)"(
      _feePool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLiquidationFeeRatio(tuple)"(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMaintenanceMarginRatio(tuple)"(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWhitelist(_whitelist: string, overrides?: Overrides): Promise<BigNumber>;

    "setWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    settlePosition(_amm: string, overrides?: Overrides): Promise<BigNumber>;

    "settlePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMargin(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addMargin(address,tuple)"(
      _amm: string,
      _addedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    adjustPosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "adjustPosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    closePosition(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "closePosition(address,tuple)"(
      _amm: string,
      _quoteAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feePool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLatestCumulativePremiumFraction(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLatestCumulativePremiumFraction(address)"(
      _amm: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarginRatio(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarginRatio(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPositionNotionalAndUnrealizedPnl(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPositionNotionalAndUnrealizedPnl(address,address,uint8)"(
      _amm: string,
      _trader: string,
      _pnlCalcOption: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnadjustedPosition(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnadjustedPosition(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initMarginRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256,address,address)"(
      _initMarginRatio: BigNumberish,
      _maintenanceMarginRatio: BigNumberish,
      _liquidationFeeRatio: BigNumberish,
      _insuranceFund: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    insuranceFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "insuranceFund()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "liquidate(address,address)"(
      _amm: string,
      _trader: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    liquidationFeeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationFeeRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maintenanceMarginRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "maintenanceMarginRatio()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openInterestNotionalMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openInterestNotionalMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "openPosition(address,uint8,tuple,tuple,tuple)"(
      _amm: string,
      _side: BigNumberish,
      _quoteAssetAmount: { d: BigNumberish },
      _leverage: { d: BigNumberish },
      _baseAssetAmountLimit: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payFunding(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "payFunding(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMargin(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMargin(address,tuple)"(
      _amm: string,
      _removedMargin: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeePool(
      _feePool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeePool(address)"(
      _feePool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLiquidationFeeRatio(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLiquidationFeeRatio(tuple)"(
      _liquidationFeeRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMaintenanceMarginRatio(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMaintenanceMarginRatio(tuple)"(
      _maintenanceMarginRatio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWhitelist(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWhitelist(address)"(
      _whitelist: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    settlePosition(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settlePosition(address)"(
      _amm: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
