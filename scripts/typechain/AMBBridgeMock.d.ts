/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AMBBridgeMockInterface extends ethers.utils.Interface {
  functions: {
    "messageId()": FunctionFragment;
    "messageSender()": FunctionFragment;
    "mockSetMessageId(bytes32)": FunctionFragment;
    "mockSetMessageSender(address)": FunctionFragment;
    "requireToPassMessage(address,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "messageId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "messageSender",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetMessageId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetMessageSender",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requireToPassMessage",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "messageId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetMessageId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetMessageSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireToPassMessage",
    data: BytesLike
  ): Result;

  events: {};
}

export class AMBBridgeMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AMBBridgeMockInterface;

  functions: {
    messageId(overrides?: CallOverrides): Promise<[string]>;

    "messageId()"(overrides?: CallOverrides): Promise<[string]>;

    messageSender(overrides?: CallOverrides): Promise<[string]>;

    "messageSender()"(overrides?: CallOverrides): Promise<[string]>;

    mockSetMessageId(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetMessageId(bytes32)"(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSetMessageSender(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetMessageSender(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requireToPassMessage(address,bytes,uint256)"(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  messageId(overrides?: CallOverrides): Promise<string>;

  "messageId()"(overrides?: CallOverrides): Promise<string>;

  messageSender(overrides?: CallOverrides): Promise<string>;

  "messageSender()"(overrides?: CallOverrides): Promise<string>;

  mockSetMessageId(
    _msgId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetMessageId(bytes32)"(
    _msgId: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSetMessageSender(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetMessageSender(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requireToPassMessage(
    _contract: string,
    _data: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requireToPassMessage(address,bytes,uint256)"(
    _contract: string,
    _data: BytesLike,
    _gas: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    messageId(overrides?: CallOverrides): Promise<string>;

    "messageId()"(overrides?: CallOverrides): Promise<string>;

    messageSender(overrides?: CallOverrides): Promise<string>;

    "messageSender()"(overrides?: CallOverrides): Promise<string>;

    mockSetMessageId(
      _msgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetMessageId(bytes32)"(
      _msgId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mockSetMessageSender(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetMessageSender(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "requireToPassMessage(address,bytes,uint256)"(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    messageId(overrides?: CallOverrides): Promise<BigNumber>;

    "messageId()"(overrides?: CallOverrides): Promise<BigNumber>;

    messageSender(overrides?: CallOverrides): Promise<BigNumber>;

    "messageSender()"(overrides?: CallOverrides): Promise<BigNumber>;

    mockSetMessageId(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetMessageId(bytes32)"(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSetMessageSender(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetMessageSender(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requireToPassMessage(address,bytes,uint256)"(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    messageId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "messageId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "messageSender()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockSetMessageId(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetMessageId(bytes32)"(
      _msgId: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSetMessageSender(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetMessageSender(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requireToPassMessage(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requireToPassMessage(address,bytes,uint256)"(
      _contract: string,
      _data: BytesLike,
      _gas: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
