/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TollPoolInterface extends ethers.utils.Interface {
  functions: {
    "TOKEN_AMOUNT_LIMIT()": FunctionFragment;
    "addFeeToken(address)": FunctionFragment;
    "candidate()": FunctionFragment;
    "clearingHouse()": FunctionFragment;
    "clientBridge()": FunctionFragment;
    "feeTokenPoolDispatcherL1()": FunctionFragment;
    "feeTokens(uint256)": FunctionFragment;
    "getFeeTokenLength()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isFeeTokenExisted(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeFeeToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFeeTokenPoolDispatcher(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "transferToFeeTokenPoolDispatcher()": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addFeeToken", values: [string]): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clientBridge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokenPoolDispatcherL1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeTokenLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeTokenExisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeFeeToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeTokenPoolDispatcher",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferToFeeTokenPoolDispatcher",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "TOKEN_AMOUNT_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clientBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeTokenPoolDispatcherL1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeTokenLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeeTokenExisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeFeeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeTokenPoolDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferToFeeTokenPoolDispatcher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "FeeTokenAdded(address)": EventFragment;
    "FeeTokenPoolDispatcherSet(address)": EventFragment;
    "FeeTokenRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenReceived(address,uint256)": EventFragment;
    "TokenTransferred(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTokenPoolDispatcherSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenTransferred"): EventFragment;
}

export class TollPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TollPoolInterface;

  functions: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    addFeeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<[string]>;

    clientBridge(overrides?: CallOverrides): Promise<[string]>;

    "clientBridge()"(overrides?: CallOverrides): Promise<[string]>;

    feeTokenPoolDispatcherL1(overrides?: CallOverrides): Promise<[string]>;

    "feeTokenPoolDispatcherL1()"(overrides?: CallOverrides): Promise<[string]>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeFeeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setFeeTokenPoolDispatcher(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFeeTokenPoolDispatcher(address)"(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferToFeeTokenPoolDispatcher(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferToFeeTokenPoolDispatcher()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

  addFeeToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addFeeToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

  clientBridge(overrides?: CallOverrides): Promise<string>;

  "clientBridge()"(overrides?: CallOverrides): Promise<string>;

  feeTokenPoolDispatcherL1(overrides?: CallOverrides): Promise<string>;

  "feeTokenPoolDispatcherL1()"(overrides?: CallOverrides): Promise<string>;

  feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "feeTokens(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _clearingHouse: string,
    _clientBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    _clearingHouse: string,
    _clientBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isFeeTokenExisted(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isFeeTokenExisted(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeFeeToken(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeFeeToken(address)"(
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setFeeTokenPoolDispatcher(
    _feeTokenPoolDispatcherL1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFeeTokenPoolDispatcher(address)"(
    _feeTokenPoolDispatcherL1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferToFeeTokenPoolDispatcher(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferToFeeTokenPoolDispatcher()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "addFeeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<string>;

    clientBridge(overrides?: CallOverrides): Promise<string>;

    "clientBridge()"(overrides?: CallOverrides): Promise<string>;

    feeTokenPoolDispatcherL1(overrides?: CallOverrides): Promise<string>;

    "feeTokenPoolDispatcherL1()"(overrides?: CallOverrides): Promise<string>;

    feeTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeFeeToken(_token: string, overrides?: CallOverrides): Promise<void>;

    "removeFeeToken(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setFeeTokenPoolDispatcher(
      _feeTokenPoolDispatcherL1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFeeTokenPoolDispatcher(address)"(
      _feeTokenPoolDispatcherL1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToFeeTokenPoolDispatcher(overrides?: CallOverrides): Promise<void>;

    "transferToFeeTokenPoolDispatcher()"(
      overrides?: CallOverrides
    ): Promise<void>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    FeeTokenAdded(token: null): EventFilter;

    FeeTokenPoolDispatcherSet(feeTokenPoolDispatcher: null): EventFilter;

    FeeTokenRemoved(token: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TokenReceived(token: null, amount: null): EventFilter;

    TokenTransferred(token: null, amount: null): EventFilter;
  };

  estimateGas: {
    TOKEN_AMOUNT_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_AMOUNT_LIMIT()"(overrides?: CallOverrides): Promise<BigNumber>;

    addFeeToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "addFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<BigNumber>;

    clientBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "clientBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokenPoolDispatcherL1(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTokenPoolDispatcherL1()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getFeeTokenLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeFeeToken(_token: string, overrides?: Overrides): Promise<BigNumber>;

    "removeFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setFeeTokenPoolDispatcher(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFeeTokenPoolDispatcher(address)"(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferToFeeTokenPoolDispatcher(overrides?: Overrides): Promise<BigNumber>;

    "transferToFeeTokenPoolDispatcher()"(
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    TOKEN_AMOUNT_LIMIT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TOKEN_AMOUNT_LIMIT()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFeeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clearingHouse()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clientBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clientBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTokenPoolDispatcherL1(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeTokenPoolDispatcherL1()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeTokens(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeTokenLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getFeeTokenLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      _clearingHouse: string,
      _clientBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isFeeTokenExisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isFeeTokenExisted(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFeeToken(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeFeeToken(address)"(
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setFeeTokenPoolDispatcher(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFeeTokenPoolDispatcher(address)"(
      _feeTokenPoolDispatcherL1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferToFeeTokenPoolDispatcher(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferToFeeTokenPoolDispatcher()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
