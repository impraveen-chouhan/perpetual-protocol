/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ClientBridgeInterface extends ethers.utils.Interface {
  functions: {
    "ambBridge()": FunctionFragment;
    "candidate()": FunctionFragment;
    "erc20Transfer(address,address,tuple)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
    "minWithdrawalAmountMap(address)": FunctionFragment;
    "multiTokenMediator()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAMBBridge(address)": FunctionFragment;
    "setMinWithdrawalAmount(address,tuple)": FunctionFragment;
    "setMultiTokenMediator(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "trustedForwarder()": FunctionFragment;
    "updateOwner()": FunctionFragment;
    "versionRecipient()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ambBridge", values?: undefined): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "erc20Transfer",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minWithdrawalAmountMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "multiTokenMediator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAMBBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinWithdrawalAmount",
    values: [string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiTokenMediator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "trustedForwarder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "versionRecipient",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ambBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Transfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minWithdrawalAmountMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTokenMediator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAMBBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinWithdrawalAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiTokenMediator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trustedForwarder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionRecipient",
    data: BytesLike
  ): Result;

  events: {
    "BridgeChanged(address)": EventFragment;
    "MultiTokenMediatorChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Relayed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BridgeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MultiTokenMediatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Relayed"): EventFragment;
}

export class ClientBridge extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ClientBridgeInterface;

  functions: {
    ambBridge(overrides?: CallOverrides): Promise<[string]>;

    "ambBridge()"(overrides?: CallOverrides): Promise<[string]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    erc20Transfer(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "erc20Transfer(address,address,tuple)"(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minWithdrawalAmountMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "minWithdrawalAmountMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    multiTokenMediator(overrides?: CallOverrides): Promise<[string]>;

    "multiTokenMediator()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setAMBBridge(
      _ambBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAMBBridge(address)"(
      _ambBridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinWithdrawalAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinWithdrawalAmount(address,tuple)"(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMultiTokenMediator(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMultiTokenMediator(address)"(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<[string]>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<[string]>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<[string]>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<[string]>;
  };

  ambBridge(overrides?: CallOverrides): Promise<string>;

  "ambBridge()"(overrides?: CallOverrides): Promise<string>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  erc20Transfer(
    _token: string,
    _receiver: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "erc20Transfer(address,address,tuple)"(
    _token: string,
    _receiver: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    _ambBridge: string,
    _multiTokenMediator: string,
    _trustedForwarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _ambBridge: string,
    _multiTokenMediator: string,
    _trustedForwarder: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isTrustedForwarder(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isTrustedForwarder(address)"(
    forwarder: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minWithdrawalAmountMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minWithdrawalAmountMap(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  multiTokenMediator(overrides?: CallOverrides): Promise<string>;

  "multiTokenMediator()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setAMBBridge(
    _ambBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAMBBridge(address)"(
    _ambBridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinWithdrawalAmount(
    _token: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinWithdrawalAmount(address,tuple)"(
    _token: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMultiTokenMediator(
    _multiTokenMediator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMultiTokenMediator(address)"(
    _multiTokenMediator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  trustedForwarder(overrides?: CallOverrides): Promise<string>;

  "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  versionRecipient(overrides?: CallOverrides): Promise<string>;

  "versionRecipient()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ambBridge(overrides?: CallOverrides): Promise<string>;

    "ambBridge()"(overrides?: CallOverrides): Promise<string>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    erc20Transfer(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "erc20Transfer(address,address,tuple)"(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minWithdrawalAmountMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minWithdrawalAmountMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTokenMediator(overrides?: CallOverrides): Promise<string>;

    "multiTokenMediator()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setAMBBridge(_ambBridge: string, overrides?: CallOverrides): Promise<void>;

    "setAMBBridge(address)"(
      _ambBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinWithdrawalAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinWithdrawalAmount(address,tuple)"(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiTokenMediator(
      _multiTokenMediator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMultiTokenMediator(address)"(
      _multiTokenMediator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    trustedForwarder(overrides?: CallOverrides): Promise<string>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<string>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;

    versionRecipient(overrides?: CallOverrides): Promise<string>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    BridgeChanged(bridge: null): EventFilter;

    MultiTokenMediatorChanged(mediator: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Relayed(token: null, receiver: null, amount: null): EventFilter;
  };

  estimateGas: {
    ambBridge(overrides?: CallOverrides): Promise<BigNumber>;

    "ambBridge()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    erc20Transfer(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "erc20Transfer(address,address,tuple)"(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minWithdrawalAmountMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minWithdrawalAmountMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTokenMediator(overrides?: CallOverrides): Promise<BigNumber>;

    "multiTokenMediator()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setAMBBridge(_ambBridge: string, overrides?: Overrides): Promise<BigNumber>;

    "setAMBBridge(address)"(
      _ambBridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinWithdrawalAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinWithdrawalAmount(address,tuple)"(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMultiTokenMediator(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMultiTokenMediator(address)"(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    trustedForwarder(overrides?: CallOverrides): Promise<BigNumber>;

    "trustedForwarder()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;

    versionRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "versionRecipient()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ambBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ambBridge()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    erc20Transfer(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "erc20Transfer(address,address,tuple)"(
      _token: string,
      _receiver: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _ambBridge: string,
      _multiTokenMediator: string,
      _trustedForwarder: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isTrustedForwarder(address)"(
      forwarder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minWithdrawalAmountMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minWithdrawalAmountMap(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiTokenMediator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "multiTokenMediator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setAMBBridge(
      _ambBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAMBBridge(address)"(
      _ambBridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinWithdrawalAmount(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinWithdrawalAmount(address,tuple)"(
      _token: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMultiTokenMediator(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMultiTokenMediator(address)"(
      _multiTokenMediator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    trustedForwarder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "trustedForwarder()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    versionRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "versionRecipient()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
