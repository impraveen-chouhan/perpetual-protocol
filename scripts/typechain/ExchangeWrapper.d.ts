/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExchangeWrapperInterface extends ethers.utils.Interface {
  functions: {
    "approve(address,address,tuple)": FunctionFragment;
    "balancerPool()": FunctionFragment;
    "candidate()": FunctionFragment;
    "compoundCUsdt()": FunctionFragment;
    "getInputPrice(address,address,tuple)": FunctionFragment;
    "getOutputPrice(address,address,tuple)": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBalancerPool(address)": FunctionFragment;
    "setCompoundCUsdt(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "swapInput(address,address,tuple,tuple,tuple)": FunctionFragment;
    "swapOutput(address,address,tuple,tuple,tuple)": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "compoundCUsdt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBalancerPool",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCompoundCUsdt",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "compoundCUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBalancerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCompoundCUsdt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "BalancerSwap(uint256,uint256)": EventFragment;
    "CompoundMint(uint256,uint256)": EventFragment;
    "CompoundRedeem(uint256,uint256)": EventFragment;
    "ExchangeSwap(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BalancerSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CompoundRedeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExchangeSwap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class ExchangeWrapper extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExchangeWrapperInterface;

  functions: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,address,tuple)"(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balancerPool(overrides?: CallOverrides): Promise<[string]>;

    "balancerPool()"(overrides?: CallOverrides): Promise<[string]>;

    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    compoundCUsdt(overrides?: CallOverrides): Promise<[string]>;

    "compoundCUsdt()"(overrides?: CallOverrides): Promise<[string]>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSpotPrice(address,address)"(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBalancerPool(address)"(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCompoundCUsdt(address)"(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  approve(
    _token: string,
    _to: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,address,tuple)"(
    _token: string,
    _to: string,
    _amount: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balancerPool(overrides?: CallOverrides): Promise<string>;

  "balancerPool()"(overrides?: CallOverrides): Promise<string>;

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  compoundCUsdt(overrides?: CallOverrides): Promise<string>;

  "compoundCUsdt()"(overrides?: CallOverrides): Promise<string>;

  getInputPrice(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPrice(address,address,tuple)"(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPrice(address,address,tuple)"(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSpotPrice(
    _inputToken: string,
    _outputToken: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSpotPrice(address,address)"(
    _inputToken: string,
    _outputToken: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  initialize(
    _balancerPool: string,
    _compoundCUsdt: string,
    _perpToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    _balancerPool: string,
    _compoundCUsdt: string,
    _perpToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBalancerPool(
    _balancerPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBalancerPool(address)"(
    _balancerPool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCompoundCUsdt(
    _compoundCUsdt: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCompoundCUsdt(address)"(
    _compoundCUsdt: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapInput(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    _minOutputTokenBought: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapInput(address,address,tuple,tuple,tuple)"(
    _inputToken: string,
    _outputToken: string,
    _inputTokenSold: { d: BigNumberish },
    _minOutputTokenBought: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOutput(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    _maxInputTokeSold: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOutput(address,address,tuple,tuple,tuple)"(
    _inputToken: string,
    _outputToken: string,
    _outputTokenBought: { d: BigNumberish },
    _maxInputTokeSold: { d: BigNumberish },
    _maxPrice: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,address,tuple)"(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    balancerPool(overrides?: CallOverrides): Promise<string>;

    "balancerPool()"(overrides?: CallOverrides): Promise<string>;

    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    compoundCUsdt(overrides?: CallOverrides): Promise<string>;

    "compoundCUsdt()"(overrides?: CallOverrides): Promise<string>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSpotPrice(address,address)"(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBalancerPool(address)"(
      _balancerPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCompoundCUsdt(address)"(
      _compoundCUsdt: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    BalancerSwap(inAmount: null, out: null): EventFilter;

    CompoundMint(underlyingAmount: null, cTokenAmount: null): EventFilter;

    CompoundRedeem(underlyingAmount: null, cTokenAmount: null): EventFilter;

    ExchangeSwap(perpTokenAmount: null, usdtAmount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,address,tuple)"(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    balancerPool(overrides?: CallOverrides): Promise<BigNumber>;

    "balancerPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    compoundCUsdt(overrides?: CallOverrides): Promise<BigNumber>;

    "compoundCUsdt()"(overrides?: CallOverrides): Promise<BigNumber>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBalancerPool(address)"(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCompoundCUsdt(address)"(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approve(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,address,tuple)"(
      _token: string,
      _to: string,
      _amount: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balancerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balancerPool()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    compoundCUsdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "compoundCUsdt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInputPrice(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPrice(address,address,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpotPrice(address,address)"(
      _inputToken: string,
      _outputToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      _balancerPool: string,
      _compoundCUsdt: string,
      _perpToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBalancerPool(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBalancerPool(address)"(
      _balancerPool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCompoundCUsdt(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCompoundCUsdt(address)"(
      _compoundCUsdt: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapInput(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _inputTokenSold: { d: BigNumberish },
      _minOutputTokenBought: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOutput(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      _inputToken: string,
      _outputToken: string,
      _outputTokenBought: { d: BigNumberish },
      _maxInputTokeSold: { d: BigNumberish },
      _maxPrice: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
