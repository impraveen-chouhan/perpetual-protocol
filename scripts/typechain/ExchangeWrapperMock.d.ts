/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExchangeWrapperMockInterface extends ethers.utils.Interface {
  functions: {
    "getInputPrice(address,address,tuple)": FunctionFragment;
    "getOutputPrice(address,address,tuple)": FunctionFragment;
    "getSpotPrice(address,address)": FunctionFragment;
    "mockSetException()": FunctionFragment;
    "mockSetSwapRatio(tuple)": FunctionFragment;
    "mockSpotPrice(tuple)": FunctionFragment;
    "swapInput(address,address,tuple,tuple,tuple)": FunctionFragment;
    "swapOutput(address,address,tuple,tuple,tuple)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getInputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutputPrice",
    values: [string, string, { d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetException",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mockSetSwapRatio",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "mockSpotPrice",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "swapInput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOutput",
    values: [
      string,
      string,
      { d: BigNumberish },
      { d: BigNumberish },
      { d: BigNumberish }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getInputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutputPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetException",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSetSwapRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mockSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapInput", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapOutput", data: BytesLike): Result;

  events: {};
}

export class ExchangeWrapperMock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExchangeWrapperMockInterface;

  functions: {
    getInputPrice(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getInputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getOutputPrice(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getOutputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    getSpotPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "getSpotPrice(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    mockSetException(overrides?: Overrides): Promise<ContractTransaction>;

    "mockSetException()"(overrides?: Overrides): Promise<ContractTransaction>;

    mockSetSwapRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSetSwapRatio(tuple)"(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mockSpotPrice(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mockSpotPrice(tuple)"(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapInput(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOutput(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getInputPrice(
    arg0: string,
    arg1: string,
    inputTokenSold: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getInputPrice(address,address,tuple)"(
    arg0: string,
    arg1: string,
    inputTokenSold: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getOutputPrice(
    arg0: string,
    arg1: string,
    outputTokenBought: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getOutputPrice(address,address,tuple)"(
    arg0: string,
    arg1: string,
    outputTokenBought: { d: BigNumberish },
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  getSpotPrice(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "getSpotPrice(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  mockSetException(overrides?: Overrides): Promise<ContractTransaction>;

  "mockSetException()"(overrides?: Overrides): Promise<ContractTransaction>;

  mockSetSwapRatio(
    _ratio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSetSwapRatio(tuple)"(
    _ratio: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mockSpotPrice(
    _price: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mockSpotPrice(tuple)"(
    _price: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapInput(
    inputToken: string,
    outputToken: string,
    inputTokenSold: { d: BigNumberish },
    arg3: { d: BigNumberish },
    arg4: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapInput(address,address,tuple,tuple,tuple)"(
    inputToken: string,
    outputToken: string,
    inputTokenSold: { d: BigNumberish },
    arg3: { d: BigNumberish },
    arg4: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOutput(
    inputToken: string,
    outputToken: string,
    outputTokenBought: { d: BigNumberish },
    arg3: { d: BigNumberish },
    arg4: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOutput(address,address,tuple,tuple,tuple)"(
    inputToken: string,
    outputToken: string,
    outputTokenBought: { d: BigNumberish },
    arg3: { d: BigNumberish },
    arg4: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getInputPrice(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getInputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getOutputPrice(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getOutputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    getSpotPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "getSpotPrice(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    mockSetException(overrides?: CallOverrides): Promise<void>;

    "mockSetException()"(overrides?: CallOverrides): Promise<void>;

    mockSetSwapRatio(
      _ratio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSetSwapRatio(tuple)"(
      _ratio: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    mockSpotPrice(
      _price: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "mockSpotPrice(tuple)"(
      _price: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    swapInput(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    swapOutput(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    getInputPrice(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getInputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutputPrice(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOutputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSpotPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSpotPrice(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mockSetException(overrides?: Overrides): Promise<BigNumber>;

    "mockSetException()"(overrides?: Overrides): Promise<BigNumber>;

    mockSetSwapRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSetSwapRatio(tuple)"(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    mockSpotPrice(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mockSpotPrice(tuple)"(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapInput(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOutput(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getInputPrice(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getInputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      inputTokenSold: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutputPrice(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOutputPrice(address,address,tuple)"(
      arg0: string,
      arg1: string,
      outputTokenBought: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSpotPrice(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSpotPrice(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mockSetException(overrides?: Overrides): Promise<PopulatedTransaction>;

    "mockSetException()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    mockSetSwapRatio(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSetSwapRatio(tuple)"(
      _ratio: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mockSpotPrice(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mockSpotPrice(tuple)"(
      _price: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapInput(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapInput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      inputTokenSold: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOutput(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOutput(address,address,tuple,tuple,tuple)"(
      inputToken: string,
      outputToken: string,
      outputTokenBought: { d: BigNumberish },
      arg3: { d: BigNumberish },
      arg4: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
