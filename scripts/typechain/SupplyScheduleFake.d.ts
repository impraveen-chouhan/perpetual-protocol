/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SupplyScheduleFakeInterface extends ethers.utils.Interface {
  functions: {
    "candidate()": FunctionFragment;
    "decayRate()": FunctionFragment;
    "inflationRate()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256)": FunctionFragment;
    "isMintable()": FunctionFragment;
    "isStarted()": FunctionFragment;
    "mintDuration()": FunctionFragment;
    "mintableSupply()": FunctionFragment;
    "mock_getCurrentTimestamp()": FunctionFragment;
    "mock_setBlockNumber(uint256)": FunctionFragment;
    "mock_setBlockTimestamp(uint256)": FunctionFragment;
    "nextMintTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "recordMintEvent()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDecayRate(tuple)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "startSchedule()": FunctionFragment;
    "supplyDecayEndTime()": FunctionFragment;
    "updateOwner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "candidate", values?: undefined): string;
  encodeFunctionData(functionFragment: "decayRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "inflationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isStarted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintableSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_getCurrentTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mock_setBlockTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextMintTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordMintEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDecayRate",
    values: [{ d: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "startSchedule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supplyDecayEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOwner",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "candidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decayRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "inflationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMintable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStarted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintableSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_getCurrentTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mock_setBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextMintTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordMintEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecayRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyDecayEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOwner",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class SupplyScheduleFake extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SupplyScheduleFakeInterface;

  functions: {
    candidate(overrides?: CallOverrides): Promise<[string]>;

    "candidate()"(overrides?: CallOverrides): Promise<[string]>;

    decayRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "decayRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    inflationRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "inflationRate()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    initialize(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,uint256,uint256)"(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isMintable(overrides?: CallOverrides): Promise<[boolean]>;

    "isMintable()"(overrides?: CallOverrides): Promise<[boolean]>;

    isStarted(overrides?: CallOverrides): Promise<[boolean]>;

    "isStarted()"(overrides?: CallOverrides): Promise<[boolean]>;

    mintDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mintDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mintableSupply(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    "mintableSupply()"(
      overrides?: CallOverrides
    ): Promise<[[BigNumber] & { d: BigNumber }]>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    nextMintTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextMintTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recordMintEvent(overrides?: Overrides): Promise<ContractTransaction>;

    "recordMintEvent()"(overrides?: Overrides): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setDecayRate(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDecayRate(tuple)"(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startSchedule(overrides?: Overrides): Promise<ContractTransaction>;

    "startSchedule()"(overrides?: Overrides): Promise<ContractTransaction>;

    supplyDecayEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "supplyDecayEndTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  candidate(overrides?: CallOverrides): Promise<string>;

  "candidate()"(overrides?: CallOverrides): Promise<string>;

  decayRate(overrides?: CallOverrides): Promise<BigNumber>;

  "decayRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

  "inflationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _minter: string,
    _inflationRate: BigNumberish,
    _decayRate: BigNumberish,
    _mintDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,uint256,uint256)"(
    _minter: string,
    _inflationRate: BigNumberish,
    _decayRate: BigNumberish,
    _mintDuration: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isMintable(overrides?: CallOverrides): Promise<boolean>;

  "isMintable()"(overrides?: CallOverrides): Promise<boolean>;

  isStarted(overrides?: CallOverrides): Promise<boolean>;

  "isStarted()"(overrides?: CallOverrides): Promise<boolean>;

  mintDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "mintDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  mintableSupply(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  "mintableSupply()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber] & { d: BigNumber }>;

  mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  mock_setBlockNumber(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockNumber(uint256)"(
    _number: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mock_setBlockTimestamp(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mock_setBlockTimestamp(uint256)"(
    _timestamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  nextMintTime(overrides?: CallOverrides): Promise<BigNumber>;

  "nextMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recordMintEvent(overrides?: Overrides): Promise<ContractTransaction>;

  "recordMintEvent()"(overrides?: Overrides): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setDecayRate(
    _decayRate: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDecayRate(tuple)"(
    _decayRate: { d: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOwner(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startSchedule(overrides?: Overrides): Promise<ContractTransaction>;

  "startSchedule()"(overrides?: Overrides): Promise<ContractTransaction>;

  supplyDecayEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  "supplyDecayEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateOwner(overrides?: Overrides): Promise<ContractTransaction>;

  "updateOwner()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    candidate(overrides?: CallOverrides): Promise<string>;

    "candidate()"(overrides?: CallOverrides): Promise<string>;

    decayRate(overrides?: CallOverrides): Promise<BigNumber>;

    "decayRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,uint256,uint256)"(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isMintable(overrides?: CallOverrides): Promise<boolean>;

    "isMintable()"(overrides?: CallOverrides): Promise<boolean>;

    isStarted(overrides?: CallOverrides): Promise<boolean>;

    "isStarted()"(overrides?: CallOverrides): Promise<boolean>;

    mintDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "mintDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableSupply(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    "mintableSupply()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { d: BigNumber }>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    nextMintTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recordMintEvent(overrides?: CallOverrides): Promise<void>;

    "recordMintEvent()"(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setDecayRate(
      _decayRate: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setDecayRate(tuple)"(
      _decayRate: { d: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    startSchedule(overrides?: CallOverrides): Promise<void>;

    "startSchedule()"(overrides?: CallOverrides): Promise<void>;

    supplyDecayEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyDecayEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: CallOverrides): Promise<void>;

    "updateOwner()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    candidate(overrides?: CallOverrides): Promise<BigNumber>;

    "candidate()"(overrides?: CallOverrides): Promise<BigNumber>;

    decayRate(overrides?: CallOverrides): Promise<BigNumber>;

    "decayRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    inflationRate(overrides?: CallOverrides): Promise<BigNumber>;

    "inflationRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,uint256,uint256)"(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isMintable(overrides?: CallOverrides): Promise<BigNumber>;

    "isMintable()"(overrides?: CallOverrides): Promise<BigNumber>;

    isStarted(overrides?: CallOverrides): Promise<BigNumber>;

    "isStarted()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "mintDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintableSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "mintableSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_getCurrentTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "mock_getCurrentTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    nextMintTime(overrides?: CallOverrides): Promise<BigNumber>;

    "nextMintTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recordMintEvent(overrides?: Overrides): Promise<BigNumber>;

    "recordMintEvent()"(overrides?: Overrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setDecayRate(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDecayRate(tuple)"(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOwner(newOwner: string, overrides?: Overrides): Promise<BigNumber>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startSchedule(overrides?: Overrides): Promise<BigNumber>;

    "startSchedule()"(overrides?: Overrides): Promise<BigNumber>;

    supplyDecayEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    "supplyDecayEndTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateOwner(overrides?: Overrides): Promise<BigNumber>;

    "updateOwner()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    candidate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "candidate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decayRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decayRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    inflationRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inflationRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,uint256,uint256)"(
      _minter: string,
      _inflationRate: BigNumberish,
      _decayRate: BigNumberish,
      _mintDuration: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isMintable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isMintable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isStarted()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintableSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mintableSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_getCurrentTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mock_getCurrentTimestamp()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockNumber(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockNumber(uint256)"(
      _number: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mock_setBlockTimestamp(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mock_setBlockTimestamp(uint256)"(
      _timestamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    nextMintTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nextMintTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recordMintEvent(overrides?: Overrides): Promise<PopulatedTransaction>;

    "recordMintEvent()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setDecayRate(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDecayRate(tuple)"(
      _decayRate: { d: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOwner(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startSchedule(overrides?: Overrides): Promise<PopulatedTransaction>;

    "startSchedule()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    supplyDecayEndTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supplyDecayEndTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateOwner(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateOwner()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
